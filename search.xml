<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MyBatis学习笔记</title>
      <link href="/2023/04/04/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/04/04/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis学习笔记"><a href="#MyBatis学习笔记" class="headerlink" title="MyBatis学习笔记"></a>MyBatis学习笔记</h1><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>框架相当于是一个脚手架，内部已经写好了很多代码</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>MyBatis是一款优秀的持久层框架</li><li>MyBatis免除了几乎所有的JDBC代码以及设置参数和获取结果的过程</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>参照官方文档</p><p>报提醒说依赖找不到？在maven中点击install，安装依赖即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>MySQL连接驱动的全类名</p><p><img src="/2023/04/04/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230401171557714.png" alt="image-20230401171557714"></p><p>UserDao.xml就相当于UserDao的实现类</p><h3 id="加快开发速度"><a href="#加快开发速度" class="headerlink" title="加快开发速度"></a>加快开发速度</h3><ul><li>设置代码模板template</li><li>插件 MyBatis X</li></ul><h3 id="参数获取"><a href="#参数获取" class="headerlink" title="参数获取"></a>参数获取</h3><h4 id="只有一个参数"><a href="#只有一个参数" class="headerlink" title="只有一个参数"></a>只有一个参数</h4><p><strong>基本类型</strong></p><p>可以使用<code>#&#123;&#125;</code>来直接取值，写任意名字都可以获取到参数。但是一般用方法的参数名来取</p><p>例如：</p><p>接口中方法定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><p>xml中内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span>  select * from user where id = #&#123;id&#125;<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>parameterType</code>将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以根据语句中实际传入的参数计算出应该使用的类型处理器（TypeHandler），默认值为未设置（unset），resultType定义的是查出来的一行的数据的类型</p><p><strong>POJO</strong></p><p>如果参数就是一个实体类</p><p>我们可以使用该实体类中的属性名来获取对应的值。</p><p>例如：</p><p>接口中方法定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">findByUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>xml中内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125; and username = #&#123;username&#125; and age = #&#123;age&#125; and address = #&#123;address&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Map</strong></p><p>传递的参数是一个Map对象</p><p>使用map中的key来获取对应的值</p><p>实体类和Map是十分相似的</p><h4 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h4><p>一般在方法参数前使用@Param来设置参数名。</p><p>例如：</p><p>接口中方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">findByCondition</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id,<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure><p>最终map中的键值对如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;id=2, param1=2, username=PDD, param2=PDD&#125;</span><br></pre></td></tr></table></figure><p>所以我们就可以使用如下方式来获取参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">     select * from user where id = #&#123;id&#125; and username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>建议如果只有一个参数的时候不用做什么特殊处理。如果是有多个参数的情况下一定要加上@Param来设置参数名</p><h3 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h3><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><p>工厂类，主要用来获取SqlSession对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlSession openSession();</span><br></pre></td></tr></table></figure><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><p>SqlSession 提供了在数据库执行 SQL 命令所需的所有方法 。它还提供了事务的相关操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T getMapper(Class&lt;T&gt; type);//获取mapper对象,其实就是可以获取某个Dao接口的实现类</span><br><span class="line">void commit();//提交事务</span><br><span class="line">void rollback();//回滚事务</span><br><span class="line">void close();//释放资源</span><br></pre></td></tr></table></figure><h3 id="MyBatis实现增删改查"><a href="#MyBatis实现增删改查" class="headerlink" title="MyBatis实现增删改查"></a>MyBatis实现增删改查</h3><p>增删改的操作都是要提交事务的</p><p><code>sqlSession.commit()</code></p><p>Dao接口定义方法，xml中sql语句实现</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><p><img src="/2023/04/04/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230402130509964.png" alt="image-20230402130509964"></p><p>MyBatis的这写配置文件中，这些value可以不写死，可以通过读取Jdbc的properties文件来动态获取value的值</p><p>value=”${jdbc.driver}”</p><h4 id="映射器mappers"><a href="#映射器mappers" class="headerlink" title="映射器mappers"></a>映射器mappers</h4><p>非常重要的配置</p><p>继续拿之前的例子来看，UserDao.xml就是映射文件</p><p>我们要告诉MyBatis去哪里找映射文件</p><p>目前我用的方法是</p><p><img src="/2023/04/04/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230402134024627.png" alt="image-20230402134024627"></p><p>后期主要使用的方法如下：</p><p>将包内的映射器接口实现全部注册为映射器，例如：</p><p>（就是有xml配置文件的Dao接口在哪个包下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义dao接口所在的包。要求xml文件存放的路径和dao接口的包名要对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h3><p>添加日志的依赖和配置文件即可</p><h3 id="获取参数时-和-的区别"><a href="#获取参数时-和-的区别" class="headerlink" title="获取参数时 #{}和${}的区别"></a>获取参数时 #{}和${}的区别</h3><p>如果使用#{}.他是预编译的sql可以防止SQL注入攻击<br>如果使用${}他是直接把参数值拿来进行拼接，这样会有SQL注入的危险</p><p>如果使用的是#{}来获取参数值日志如下：<br>Preparing: select * from user where id = <strong>?</strong> and username = <strong>?</strong> and age = <strong>?</strong> and address = <strong>?</strong><br>Parameters: 2(Integer), 快乐风男(String), 29(Integer), 北京(String)</p><p>如果使用${}来获取参数值日志如下：<br>Preparing: select * from user where id = 2 and username = 快乐风男 and age = 29 and address = 北京</p><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><h3 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h3><p>我们也可以使用注解的形式来进行开发，用注解来替换掉xml。 使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。 所以我们在实际企业开发中一般都是使用XML的形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态MySQL"><a href="#动态MySQL" class="headerlink" title="动态MySQL"></a>动态MySQL</h3><p>在实际开发中的SQL语句没有之前的这么简单，很多时候需要根据传入的参数情况动态的生成SQL语句。Mybatis提供了动态SQL相关的标签让我们使用。</p><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>使用if标签进行条件判断，条件成立才会把if标签中的内容拼接进sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">     select * from user where  id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span></span><br><span class="line">       and username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果参数username为null则执行的sql为：<strong>select * from user where id = ?</strong> </p><p>如果参数username不为null则执行的sql为：<strong>select * from user where id = ? and username = ?</strong> </p><p><strong>注意：在test属性中表示参数的时候不需要写#{}，写了会出问题，直接参数名即可</strong></p><h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><p>trim标签实际运用中其实并没有那么多，但是可以帮助我们理解其他标签</p><p>动态清除前缀、后缀：prefixOverrides、suffixOverrides</p><p>动态添加前缀、后缀：prefix、suffix     (如果标签中<strong>有内容</strong>，不为null，就会添加上设置的前缀)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">findByCondition</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id,<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and|or&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span></span><br><span class="line">            and username = #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用方法时如果传入的id和username为null则执行的SQL为：select * from user</p><p>调用方法时如果传入的id为null，username不为null，则执行的SQL为：select * from user where username = ?</p><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p>where标签等价于：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and|or&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    可以使用where标签动态的拼接where并且去除前缀的and或者or。</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span></span><br><span class="line">            and username = #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果id和username都为null，则执行的sql为：**select * from user **</p><p>如果id为null，username不为null，则执行的sql为：**select * from user  where username = ? **</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set标签等价于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用set标签动态的拼接set并且去除后缀的逗号。</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">    UPDATE USER</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span></span><br><span class="line">            username = #&#123;username&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age!=null&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address!=null&quot;</span>&gt;</span></span><br><span class="line">            address = #&#123;address&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果调用方法时传入的User对象的id为2，username不为null，其他属性都为null则最终执行的sql为：UPDATE USER SET username = ? where id = ? </p><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>遍历</p><h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose when otherwise"></a>choose when otherwise</h4><p>依次相当于Java中的switch case default</p><p>当我们不想使用所有的条件，而只是想从多个条件中选择一个使用时。可以使用choose系列标签。类似于java中的switch。</p><p>例如:</p><p>接口中方法定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectChose</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>期望：</p><p>​        如果user对象的id不为空时就通过id查询。</p><p>​        如果id为null,username不为null就通过username查询。</p><p>​        如果id和username都会null就查询id为3的用户</p><p>xml映射文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectChose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">      select * from user</span><br><span class="line">      <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">                  id = #&#123;id&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span></span><br><span class="line">                  username = #&#123;username&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                  id = 3</span><br><span class="line">              <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SQL片段抽取"><a href="#SQL片段抽取" class="headerlink" title="SQL片段抽取"></a>SQL片段抽取</h3><p>我们在xml映射文件中编写SQL语句的时候可能会遇到重复的SQL片段。这种SQL片段我们可以使用sql标签来进行抽取。然后在需要使用的时候使用include标签进行使用。</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;baseSelect&quot;</span> &gt;</span>id,username,age,address<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;baseSelect&quot;</span>/&gt;</span>  from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终执行的sql为： <strong>select id,username,age,address from user</strong> </p><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><p>逻辑外键（额外添加一列）、物理外键（外键约束）</p><h3 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>我们可以使用resultMap标签自定义<strong>结果集</strong>和<strong>实体类属性</strong>的<strong>映射规则</strong></p><p><strong>column</strong>关键字<strong>property</strong>关键字</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       resultMap 用来自定义结果集和实体类的映射</span></span><br><span class="line"><span class="comment">           属性：</span></span><br><span class="line"><span class="comment">               id 相当于这个resultMap的唯一标识</span></span><br><span class="line"><span class="comment">               type 用来指定映射到哪个实体类</span></span><br><span class="line"><span class="comment">       id标签  用来指定主键列的映射规则</span></span><br><span class="line"><span class="comment">           属性：</span></span><br><span class="line"><span class="comment">               property 要映射的属性名</span></span><br><span class="line"><span class="comment">               column  对应的列名</span></span><br><span class="line"><span class="comment">       result标签 用来指定普通列的映射规则</span></span><br><span class="line"><span class="comment">           属性：</span></span><br><span class="line"><span class="comment">               property 要映射的属性名</span></span><br><span class="line"><span class="comment">               column 对应的列名</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.Order&quot;</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;createtime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createtime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">property</span>=<span class="string">&quot;remark&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用我们自定义的映射规则--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">       SELECT id,createtime,price,remark,user_id  FROM ORDERS</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自动映射"><a href="#自动映射" class="headerlink" title="自动映射"></a>自动映射</h4><p><strong>autoMapping关键字</strong></p><p>我们定义resultMap时默认情况下自动映射是开启状态的。也就是如果结果集的列名和我们的属性名相同是会自动映射的我们只需要写特殊情况的映射关系即可</p><p>例如：</p><p>下面这种写法和上面的写法会有相同的效果，因为其他属性的属性名和结果集的列名都是相同的会自动映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.Order&quot;</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用我们自定义的映射规则--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">       SELECT id,createtime,price,remark,user_id  FROM ORDERS</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如有需要可以选择关闭自动映射可以把resultMap的autoMapping属性设置为false。    </p><p>例如：    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.Order&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;createtime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createtime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">property</span>=<span class="string">&quot;remark&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="继承映射关系"><a href="#继承映射关系" class="headerlink" title="继承映射关系"></a>继承映射关系</h4><p>我们可以使用resultMap 的extends属性来指定一个resultMap，从而复用重复的映射关系配置</p><p>定义了父Map可以是其他Map都要使用的</p><p><strong>extends</strong>关键字</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--定义个父映射，供其他resultMap继承--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;baseOrderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.Order&quot;</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;createtime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createtime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">property</span>=<span class="string">&quot;remark&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--继承baseOrderMap，然后只需要写自己特有的映射关系即可--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.Order&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;false&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;baseOrderMap&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>有的时候我们需要查询多张表的数据才可以得到我们要的结果。</p><p>我们可以直接写一个多表关联的SQL进行查询。也可以分步进行多次的查询来拿到我们需要的结果。            </p><p>Mybatis就提供了对应的配置，可以让我们去更方便的进行相应的查询和对应的结果集处理。</p><h4 id="多表关联查询"><a href="#多表关联查询" class="headerlink" title="多表关联查询"></a>多表关联查询</h4><p>关键字：association、collection</p><h5 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a><strong>一对一关系</strong></h5><p>两个实体之间是一对一的关系。(例如我们需要查询订单，要求还需要下单用户的数据。这里的订单相对于用户是一对一。)</p><p>例如：</p><p>方法定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据订单id查询订单，要求把下单用户的信息也查询出来</span></span><br><span class="line">Order <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><p>因为期望Order中还能包含下单用户的数据，所以可以再Order中增加一个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> User user;</span><br></pre></td></tr></table></figure><p>SQL语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">o.id,o.`createtime`,o.`price`,o.`remark`,o.`user_id`,u.`id` uid,u.`username`,u.`age`,u.`address`</span><br><span class="line">FROM </span><br><span class="line">orders o,USER u</span><br><span class="line">WHERE</span><br><span class="line">o.`user_id` = u.`id`</span><br><span class="line">AND o.id = 2</span><br></pre></td></tr></table></figure><p>我们可以使用如下<strong>两种</strong>方式封装结果集。</p><p><strong>一、可以使用ResultMap设置user对象的属性的映射规则。</strong></p><p>①resultMap定义，主要是对user对象的属性设置映射规则</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;baseOrderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.Order&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;createtime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createtime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">property</span>=<span class="string">&quot;remark&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.Order&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;false&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;baseOrderMap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Order和User关联的映射--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.Order&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;false&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;user.id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;user.username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;user.age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;user.address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②使用定义好的resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据订单id查询订单，要求把下单用户的信息也查询出来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderUserMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            o.`id`,o.`createtime`,o.`price`,o.`remark`,o.`user_id`,u.`id` uid,u.`username`,u.`age`,u.`address`</span><br><span class="line">        FROM</span><br><span class="line">            orders o,`user` u</span><br><span class="line">        WHERE</span><br><span class="line">            o.id = #&#123;id&#125; AND</span><br><span class="line">            o.`user_id`=u.`id`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里给表取了别名</p><p><strong>二、可以使用ResultMap中的子标签association 来设置关联实体类的映射规则</strong>.</p><p>这种利用association子标签比前一种更加方便</p><p>①定义resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;baseOrderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.Order&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;createtime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createtime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">property</span>=<span class="string">&quot;remark&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.Order&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;false&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;baseOrderMap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Order和User关联的映射（使用association）--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderUserMapUseAssociation&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.Order&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;false&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②使用resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据订单id查询订单，要求把下单用户的信息也查询出来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderUserMapUseAssociation&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            o.`id`,o.`createtime`,o.`price`,o.`remark`,o.`user_id`,u.`id` uid,u.`username`,u.`age`,u.`address`</span><br><span class="line">        FROM</span><br><span class="line">            orders o,`user` u</span><br><span class="line">        WHERE</span><br><span class="line">            o.id = #&#123;id&#125; AND</span><br><span class="line">            o.`user_id`=u.`id`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h5><p>两个实体之间是一对多的关系。(例如我们需要查询用户，要求还需要该用户所具有的角色信息。这里的用户相对于角色是一对多的。)</p><p>例如：</p><p>方法定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户，并且要求把该用户所具有的角色信息也查询出来</span></span><br><span class="line">User <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><p>因为期望User中还能包含该用户所具有的角色信息，所以可以在User中增加一个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    该用户所具有的角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br></pre></td></tr></table></figure><p>SQL语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">u.`id`,u.`username`,u.`age`,u.`address`,r.id rid,r.name,r.desc</span><br><span class="line">FROM </span><br><span class="line">USER u,user_role ur,role r</span><br><span class="line">WHERE </span><br><span class="line">u.id=ur.user_id AND ur.role_id = r.id</span><br><span class="line">AND u.id = 2</span><br></pre></td></tr></table></figure><p>（这里有三张表，其中user_role是一张中间表，还分别给三张表去了别名</p><p>结果集</p><p><img src="/2023/04/04/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-4.png" alt="image-20210224164927461"></p><p>我们可以使用如下的方式封装结果集。</p><h5 id="2-1-2-1-使用ResultMap中的collection"><a href="#2-1-2-1-使用ResultMap中的collection" class="headerlink" title="2.1.2.1 使用ResultMap中的collection"></a>2.1.2.1 使用ResultMap中的collection</h5><p>可以使用ResultMap中的子标签collection 来设置关联实体类的映射规则.</p><p>①定义ResultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义User基本属性映射规则--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userRoleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>  <span class="attr">extends</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.sangeng.pojo.Role&quot;</span> &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;desc&quot;</span> <span class="attr">column</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>②使用ResultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userRoleMap&quot;</span> &gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">        u.`id`,u.`username`,u.`age`,u.`address`,r.id rid,r.name,r.desc</span><br><span class="line">    FROM </span><br><span class="line">        USER u,user_role ur,role r</span><br><span class="line">    WHERE </span><br><span class="line">        u.id=ur.user_id AND ur.role_id = r.id</span><br><span class="line">        AND u.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终封装完的结果如下：</p><p><img src="/2023/04/04/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-5.png" alt="image-20210224170108202"></p><h4 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h4><p>关键：配置collection的相关属性，select，column等</p><p>如果有需要多表查询的需求我们也可以选择用多次查询的方式来查询出我们想要的数据。Mybatis也提供了对应的配置。</p><p>例如我们需要查询用户，要求还需要查询出该用户所具有的角色信息。我们可以选择先查询User表查询用户信息。然后在去查询关联的角色信息。    </p><h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h5><p>​    具体步骤如下：</p><p><strong>①定义查询方法</strong></p><p>​    因为我们要分两步查询: 1.查询User 2.根据用户的id查询Role  所以我们需要定义下面两个方法，并且把对应的标签也先写好</p><p>1.查询User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户名查询用户，并且要求把该用户所具有的角色信息也查询出来</span></span><br><span class="line">User <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据用户名查询用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select id,username,age,address from user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.根据user_id查询Role</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleDao</span> &#123;</span><br><span class="line"><span class="comment">//根据userId查询所具有的角色</span></span><br><span class="line">    List&lt;Role&gt; <span class="title function_">findRoleByUserId</span><span class="params">(Integer userId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据userId查询所具有的角色--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findRoleByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.pojo.Role&quot;</span>&gt;</span></span><br><span class="line">    select </span><br><span class="line">        r.id,r.name,r.desc</span><br><span class="line">    from </span><br><span class="line">        role r,user_role ur</span><br><span class="line">    where </span><br><span class="line">        ur.role_id = r.id</span><br><span class="line">        and ur.user_id = #&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②配置分步查询</strong></p><p>我们期望的效果是调用findByUsername方法查询出来的结果中就包含角色的信息。所以我们可以设置findByUsername方法的RestltMap，指定分步查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          select属性：指定用哪个查询来查询当前属性的数据 写法：包名.接口名.方法名</span></span><br><span class="line"><span class="comment">          column属性：设置当前结果集中哪列的数据作为select属性指定的查询方法需要参数</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userRoleMapBySelect&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">ofType</span>=<span class="string">&quot;com.sangeng.pojo.Role&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">select</span>=<span class="string">&quot;com.sangeng.dao.RoleDao.findRoleByUserId&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>column属性指定参数</p><p>指定findByUsername使用我们刚刚创建的resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据用户名查询用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userRoleMapBySelect&quot;</span>&gt;</span></span><br><span class="line">    select id,username,age,address from user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="分步查询配置"><a href="#分步查询配置" class="headerlink" title="分步查询配置"></a>分步查询配置</h5><p>我们可以设置按需加载，这样在我们代码中需要用到关联数据的时候才会去查询关联数据。</p><p>有两种方式可以配置分别是<strong>全局配置</strong>和<strong>局部配置</strong></p><ol><li><p>局部配置</p><p>设置fetchType属性为lazy</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userRoleMapBySelect&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">ofType</span>=<span class="string">&quot;com.sangeng.pojo.Role&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">select</span>=<span class="string">&quot;com.sangeng.dao.RoleDao.findRoleByUserId&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>全局配置</p><p>设置lazyLoadingEnabled为true</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>实际开发的大项目还是建议使用分步查询，因为可以通过设置懒查询来提高效率</p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>我们可以使用PageHelper非常方便的帮我们实现分页查询的需求。不需要自己在SQL中拼接SQL相关参数，并且能非常方便的获取的总页数总条数等分页相关数据。</p><h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><p><strong>①定义方法查询方法以及生成对应标签</strong>    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sangeng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select id,username,age,address from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>② 引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>③ 配置Mybatis核心配置文件使用分页插件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注意：分页助手的插件  配置在通用馆mapper之前 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 指定方言 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>④ 开始分页查询</strong></p><p>我们只需要在使用查询方法前设置分页参数即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//设置分页参数</span></span><br><span class="line"><span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> session.getMapper(UserDao.class);</span><br><span class="line">   <span class="comment">//设置分页查询参数</span></span><br><span class="line">   PageHelper.startPage(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">   List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">   System.out.println(users.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>如果需要获取总页数总条数等分页相关数据，只需要创建一个PageInfo对象，把刚刚查询出的返回值做为构造方法参数传入。然后使用pageInfo对象获取即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;User&gt;(users);</span><br><span class="line">   System.out.println(<span class="string">&quot;总条数：&quot;</span>+pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">&quot;总页数：&quot;</span>+pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">&quot;当前页：&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">&quot;每页显示长度：&quot;</span>+pageInfo.getPageSize());</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：    我们在进行一对多的<strong>多表查询</strong>时，如果使用了PageHelper进行分页。会出现关联数据不全的情况。我们可以使用分步查询的方式解决该问题。</p><h3 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h3><p>Mybatis的缓存其实就是把之前查到的数据存入内存（map）,下次如果还是查相同的东西，就可以直接从缓存中取，从而提高效率。</p><p>Mybatis有一级缓存和二级缓存之分，<strong>一级缓存（默认开启）是sqlsession级别的缓存。二级缓存相当于mapper级别的缓存</strong>。</p><p>一级缓存：</p><p>几种不会使用一级缓存的情况<br>    1.调用相同方法但是传入的参数不同<br>    2.调用相同方法参数也相同，但是使用的是另外一个SqlSession<br>    3.如果查询完后，对同一个表进行了增，删改的操作，都会清空这sqlSession上的缓存<br>    4.如果手动调用SqlSession的clearCache方法清除缓存了，后面也使用不了缓存</p><p>一个sqlsession就相当于一个连接</p><p>二级缓存</p><p>开启二级缓存</p><p>①全局开启</p><p>在Mybatis核心配置文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②局部开启</p><p>在要开启二级缓存的mapper映射文件中设置 cache标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sangeng.dao.RoleDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二级缓存在实际开发中基本不会使用</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23spring-week7</title>
      <link href="/2023/04/04/23spring-week7/"/>
      <url>/2023/04/04/23spring-week7/</url>
      
        <content type="html"><![CDATA[<p>还是写一些东西来记录一下我这个糟心的第七周吧。</p><p>这周过的很是煎熬，遭受了不少打击。</p><p>这周的绝大部分时间我都用在了完成操作系统lab1的t3上，也就是用汇编语言实现高精度除法。从周二到周四晚，从忐忑到灰心，不出所料地，我又向这次作业低头了。究竟是真的脑子笨还是努力不够呢，我一直这样问自己。但是倘若我真的竭尽全力，我也不会怀疑自己努力不够吧……每天充斥的各种事情，让你不得不尽可能压缩时间。</p><p>所以我的这一周都因为这个实验而变得很是郁闷。</p><p>一面郁闷着，一面却又不能停止学习。</p><p>这周加上上个周末，我完成了自己想做的自习室项目的一小部分，但是因为技术掌握的不熟，处处受阻，很是艰难，目前也是停止了开发的进程，准备在多学些知识，并且把最近的实验处理完。</p><p>同时，我还学了MyBatis，继续拓宽自己的技术栈。</p><p>在算法上，这周我也遭受了挫折。我在数周前报名了一个全国性质的我自认为“很水的”算法竞赛，但是结果却让我沉痛的意识到自己的算法功力仿佛依旧停滞不前——这次我一道题都没能AC，甚至一道逆序对的打卡题一直处于运行出错的状态……</p><p>看了王小波的《黄金时代》，并且我还颇有兴趣的买了两支钢笔，准备在平时疲惫郁闷之时可以练字来排解。</p><p>无论怎样，还是希望自己能够积极一些，再努力一些，学习的过程是很难，但是要克服呀，7thPark。</p>]]></content>
      
      
      <categories>
          
          <category> 复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23spring_week6</title>
      <link href="/2023/04/02/23spring-week6/"/>
      <url>/2023/04/02/23spring-week6/</url>
      
        <content type="html"><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>周三：</p><ol><li>JS事件，ES6常用新特性，JS对象</li><li>vue初识</li></ol><p>周四：</p><ol><li>代码随想录刷题</li><li>JavaWeb整体理解、Cookie、Session、Filter、JSON、Ajax</li><li>编译原理——ant的录屏，受益匪浅</li></ol><p>周五：</p><ol><li>代码随想录刷题</li><li>阅读完《JavaScript  jQuery交互式Web前端开发 (Jon Duckett)》</li><li>啃书：《Java Web程序设计任务教程 (黑马程序员) 》&amp;《深入浅出Vue.js (刘博文)》</li></ol><h2 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p><strong>C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树</strong></p><p>深度优先遍历：前、中、后序遍历（递归法、迭代法）</p><p>广度优先遍历：层次遍历（迭代法）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节点的定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二叉树的递归遍历"><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h4><p>postOrder：后序</p><p>post有在……之后的意思</p><h4 id="二叉树的迭代遍历"><a href="#二叉树的迭代遍历" class="headerlink" title="二叉树的迭代遍历"></a>二叉树的迭代遍历</h4><p>二叉树的迭代遍历需要搭配<strong>栈</strong>来使用</p><p><strong>前序遍历</strong></p><p>先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子。（注意左右孩子的入栈顺序）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> result;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();                       <span class="comment">// 中</span></span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            result.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);           <span class="comment">// 右（空节点不入栈）</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);             <span class="comment">// 左（空节点不入栈）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>中序遍历</strong></p><p>前面的前序遍历的代码实际上是不能和中序遍历通用的</p><p>原因是前序遍历的遍历顺序和处理顺序是相同的，而中序遍历不同</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur != <span class="literal">NULL</span>) &#123; <span class="comment">// 指针来访问节点，访问到最底层</span></span><br><span class="line">                st.<span class="built_in">push</span>(cur); <span class="comment">// 将访问的节点放进栈</span></span><br><span class="line">                cur = cur-&gt;left;                <span class="comment">// 左</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = st.<span class="built_in">top</span>(); <span class="comment">// 从栈里弹出的数据，就是要处理的数据（放进result数组里的数据）</span></span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                result.<span class="built_in">push_back</span>(cur-&gt;val);     <span class="comment">// 中</span></span><br><span class="line">                cur = cur-&gt;right;               <span class="comment">// 右</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>后序遍历</strong></p><img src="/2023/04/02/23spring-week6/image-20230320134335407.png" alt="image-20230320134335407" style="zoom:50%;"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> result;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            result.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left); <span class="comment">// 相对于前序遍历，这更改一下入栈顺序 （空节点不入栈）</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right); <span class="comment">// 空节点不入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(result.<span class="built_in">begin</span>(), result.<span class="built_in">end</span>()); <span class="comment">// 将结果反转之后就是左右中的顺序了</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h4><p>二叉树的层序遍历需要<strong>队列</strong>来辅助实现</p><p>一层一层遍历</p><p>队列先进先出，符合一层一层遍历的逻辑，而用栈先进后出适合模拟深度优先遍历也就是递归的逻辑</p><p>这种层序遍历方式就是图论中的广度优先遍历</p><p><strong>迭代法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        que.<span class="built_in">push_back</span>(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">            <span class="comment">// 这里一定要使用固定大小size，不要使用que.size()，因为que.size是不断变化的，这里非常经典</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode* node = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                vec.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) que.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) que.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.<span class="built_in">push_back</span>(vec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>递归法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">order</span><span class="params">(TreeNode* cur, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; result, <span class="type">int</span> depth)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="built_in">size</span>() == depth) result.<span class="built_in">push_back</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        result[depth].<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">        <span class="built_in">order</span>(cur-&gt;left, result, depth + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">order</span>(cur-&gt;right, result, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">order</span>(root, result, depth);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>个人还是喜欢最常用最好理解的用队列加以辅助的迭代法</p><p><strong>例题1</strong></p><img src="/2023/04/02/23spring-week6/image-20230320142457185.png" alt="image-20230320142457185" style="zoom: 80%;"><p>这道题其实是二叉树层序遍历的变形，我们在遍历每一层得到一个vector数组后，把每个vector数组最后一个元素单独拎出来即可</p><p><strong>例题2</strong></p><img src="/2023/04/02/23spring-week6/image-20230320144505502.png" alt="image-20230320144505502" style="zoom:80%;"><p>层序遍历，找到每一层的最大值</p><p><strong>例题3</strong></p><img src="/2023/04/02/23spring-week6/image-20230320190231755.png" alt="image-20230320190231755" style="zoom: 80%;"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">maxDepth</span>(root-&gt;left) &gt; <span class="built_in">maxDepth</span>(root-&gt;right) ? <span class="built_in">maxDepth</span>(root-&gt;left) + <span class="number">1</span> : <span class="built_in">maxDepth</span>(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            depth++; <span class="comment">// 记录深度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode* node = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) que.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) que.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>1、对称二叉树</p><img src="/2023/04/02/23spring-week6/image-20230321102209050.png" alt="image-20230321102209050" style="zoom:50%;"><p>递归三部曲：</p><ul><li>确定递归函数的参数和返回值</li><li>确定终止条件</li><li>确定递归逻辑</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(TreeNode* left, TreeNode* right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left != <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left-&gt;val != right-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">compare</span>(left-&gt;left, right-&gt;right) &amp;&amp; <span class="built_in">compare</span>(left-&gt;right, right-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">compare</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、求二叉树的最大深度、最小深度</p><p>递归法</p><p>迭代法：层序遍历</p><p>3、斐波那契数列递归算法优化</p><p><a href="https://blog.csdn.net/qq_44543551/article/details/106461955">优化方法</a></p><ul><li>动态规划法</li><li>迭代法</li><li>尾递归法</li><li>公式法</li></ul><h4 id="中序-后序-amp-中序-前序构造二叉树"><a href="#中序-后序-amp-中序-前序构造二叉树" class="headerlink" title="中序+后序&amp;中序+前序构造二叉树"></a>中序+后序&amp;中序+前序构造二叉树</h4><img src="/2023/04/02/23spring-week6/image-20230322205728396.png" alt="image-20230322205728396" style="zoom:67%;"><p>过程很熟悉，该怎么用代码实现？</p><p>后序数组的最后一个元素为切割点，先切中序数组，根据中序数组，反过来再切后序数组。一层一层切下去，每次后序数组最后一个元素就是节点元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">traversal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> rootVal = postorder[postorder.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootVal);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到中序遍历的切割点</span></span><br><span class="line">        <span class="type">int</span> ptr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; ptr &lt; inorder.<span class="built_in">size</span>(); ptr++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[ptr] == rootVal) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//划分中序遍历和后序遍历</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">leftInorder</span><span class="params">(inorder.begin(), inorder.begin() + ptr)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightInorder</span><span class="params">(inorder.begin() + ptr + <span class="number">1</span>, inorder.end())</span></span>;        </span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">leftPostorder</span><span class="params">(postorder.begin(), postorder.begin() + leftInorder.size())</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightPostorder</span><span class="params">(postorder.begin() + leftInorder.size(), postorder.end() - <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        root-&gt;left = <span class="built_in">traversal</span>(leftInorder, leftPostorder);</span><br><span class="line">        root-&gt;right = <span class="built_in">traversal</span>(rightInorder, rightPostorder);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traversal</span>(inorder, postorder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>知道由后序+中序构建二叉树的代码怎么写，自然而然地，就可以明白前序+中序，前序的分割方式略有不同</p><h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><p>回溯是递归的副产品</p><p>回溯法并不是什么高效的算法，因为回溯的本质是穷举，穷举所有可能</p><p>回溯法解决的问题都可以抽象为树形结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回溯算法伪代码</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(参数)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        <span class="built_in">backtracking</span>(路径，选择列表); <span class="comment">// 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第一次</strong>涉及回溯的二叉树题</p><img src="/2023/04/02/23spring-week6/image-20230322120804406.png" alt="image-20230322120804406" style="zoom:50%;"><p>回溯和递归是一一对应的，有一个递归，就要有一个回溯</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优雅&amp;精简写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root, string path, vector&lt;string&gt; &amp;res)</span> </span>&#123;</span><br><span class="line">        path += <span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) <span class="built_in">traversal</span>(root-&gt;left, path + <span class="string">&quot;-&gt;&quot;</span>, res);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) <span class="built_in">traversal</span>(root-&gt;right, path + <span class="string">&quot;-&gt;&quot;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string path;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="built_in">traversal</span>(root, path, res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原始写法，更容易理解每一步</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;string&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        path.<span class="built_in">push_back</span>(cur-&gt;val); <span class="comment">// 中，中为什么写在这里，因为最后一个节点也要加入到path中 </span></span><br><span class="line">        <span class="comment">// 这才到了叶子节点</span></span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;left == <span class="literal">NULL</span> &amp;&amp; cur-&gt;right == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            string sPath;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; path.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                sPath += <span class="built_in">to_string</span>(path[i]);</span><br><span class="line">                sPath += <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sPath += <span class="built_in">to_string</span>(path[path.<span class="built_in">size</span>() - <span class="number">1</span>]);</span><br><span class="line">            result.<span class="built_in">push_back</span>(sPath);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;left) &#123; <span class="comment">// 左 </span></span><br><span class="line">            <span class="built_in">traversal</span>(cur-&gt;left, path, result);</span><br><span class="line">            path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;right) &#123; <span class="comment">// 右</span></span><br><span class="line">            <span class="built_in">traversal</span>(cur-&gt;right, path, result);</span><br><span class="line">            path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; result;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="built_in">traversal</span>(root, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>二叉树的最近公共祖先</strong></p><img src="/2023/04/02/23spring-week6/image-20230325105915824.png" alt="image-20230325105915824" style="zoom: 67%;"><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>C++中常量<strong>INT_MAX和INT_MIN</strong>分别表示最大、最小整数，定义在头文件limits.h中</p><h2 id="计网"><a href="#计网" class="headerlink" title="计网"></a>计网</h2><h3 id="关于GET和POST请求"><a href="#关于GET和POST请求" class="headerlink" title="关于GET和POST请求"></a>关于GET和POST请求</h3><p>根据 RFC 规范，<strong>GET 的语义是从服务器获取指定的资源</strong>，<strong>POST 的语义是根据请求负荷（报文body）对指定的资源做出处理</strong></p><p>GET：URL</p><p>POST：BODY</p><p>HTTP中<strong>安全</strong>和<strong>幂等</strong>的概念：</p><ul><li>在 HTTP 协议里，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。</li><li>所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。</li></ul><img src="/2023/04/02/23spring-week6/image-20230320160659779.png" alt="image-20230320160659779" style="zoom: 67%;"><img src="/2023/04/02/23spring-week6/image-20230320160740791.png" alt="image-20230320160740791" style="zoom:67%;"><p>浏览器地址拦看不到 POST 提交的 body 数据，但是只要抓个包就都能看到了。所以，要避免传输过程中数据被窃取，就要使用 HTTPS 协议，这样所有 HTTP 的数据都会被加密传输。</p><img src="/2023/04/02/23spring-week6/image-20230320161041411.png" alt="image-20230320161041411" style="zoom:67%;"><h3 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h3><p>两种实现方式</p><ul><li>强制缓存</li><li>协商缓存</li></ul><blockquote><p>强缓存指的是只要浏览器判断缓存没有过期，则直接使用浏览器的本地缓存，决定是否使用缓存的主动性在于浏览器这边</p><p>协商缓存就是与服务器协商之后，通过协商结果来判断是否使用本地缓存</p></blockquote><p><strong>只有在未能命中强制缓存的时候，才能发起带有协商缓存字段的请求</strong></p><img src="23spring_week6.assets/http缓存.png" alt="img" style="zoom:50%;"><p>请求资源，先看强制缓存是否过期，没有过期，直接用，结束；过期，则用协商缓存，和服务期通过If-None-Match字段或If-Modified-Since判断是否重发</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>当浏览网站时，”事件“会发生在浏览器中，而这些事件都可以用来触发JS代码中的函数</p><ul><li>UI事件：当与浏览器UI本身（而不是网页）交互时发生的事件，比如load、unload、error、resize、scroll</li><li>键盘事件：当用户操作键盘时发生，比如keydown、keyup、keypress</li><li>鼠标事件：当用户操作鼠标、触控板或触摸屏时发生，比如click、dbclick、mousedown等等</li><li>焦点事件：一个元素得到或失去焦点时发生 focus、blur</li><li>表单事件：当用户与表单元素进行交互时发生</li><li>变动事件：脚本修改了DOM结构后发生</li></ul><p>将事件绑定到元素的三种方法：</p><ul><li>HTML事件处理程序:<code>&lt;a onclick=&quot;...&quot;/&gt;</code>    不推荐使用</li><li>传统的DOM事件处理程序：缺点是只能在一个事件上附加一个函数（使用时要在事件名称前加上“on”）</li><li>第2级DOM监听器</li></ul><p>两种事件流：</p><ul><li>事件冒泡（默认）：事件从最具体的节点向外传播到最宽泛的节点</li><li>事件捕获：事件从最宽泛的节点开始向内传播到最具体的节点</li></ul><p><a href="https://www.jianshu.com/p/ac1787f6c50f">ES6常用新特性</a></p><p><a href="https://zhuanlan.zhihu.com/p/65059409">关于JS对象的问题</a></p><p>“在JavaScript中，一切皆对象”这个说法是不完全正确的</p><p>JS中的数据类型可以分为原始数据类型和对象</p><p>原始数据类型在底层上直接实现，不是object</p><p>但是我们常常能发现这些原始数据类型可以像对象一样使用，比如<code>let x = &quot;abc&quot;;</code>此时<code>x.length</code>则等于3</p><p>这是为什么呢？<br>这是因为JS会自动进行 <strong>Auto-Boxing（临时包装）</strong>的过程，首先将其转换为临时<strong>包装器对象</strong>（比如string=&gt;String），再访问其上的属性或方法，而不会影响原始值类型的属性。</p><h3 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h3><p><a href="https://blog.csdn.net/qq_41911570/article/details/83279327">一篇总结JavaWeb的文章</a></p><p>JSP的本质的是一个Servlet</p><ul><li>JSP的脚本元素    <code>&lt;% %&gt;</code></li><li>JSP的表达式  <code>&lt;%= %&gt;</code></li></ul><p>EL表达式是JSP内置的表达式语言，<code>$&#123;...&#125;</code></p><p>XML的用途：</p><ul><li>配置文件：如JavaWeb中的Web.xml</li><li>数据交换格式</li><li>数据存储</li></ul><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><blockquote><p>cookie 的出现是因为 HTTP 是无状态的一种协议，换句话说，服务器记不住你，可能你每刷新一次网页，就要重新输入一次账号密码进行登录。这显然是让人无法接受的，cookie 的作用就好比服务器给你贴个标签，然后你每次向服务器再发请求时，服务器就能够 cookie 认出你</p></blockquote><p>服务器通知客户端保存键值对的一种技术，客户端有了 Cookie 后，每次请求都发送给服务器</p><p>一般每个Cookie的大小最大为4kb</p><p>Cookie应用举例</p><p>免输入用户名登录</p><img src="/2023/04/02/23spring-week6/image-20230323151213277.png" alt="image-20230323151213277" style="zoom: 67%;"><img src="/2023/04/02/23spring-week6/image-20230323151231647.png" alt="image-20230323151231647" style="zoom:67%;"><p>创建cookie，并把cookie返回给客户端</p><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>Session 是一个接口（HttpSession），Session 就是会话，用来维护客户端和服务器之间关联的一种技术。 每个客户端都有自己的一个 Session 会话，Session 会话中，我们经常用来保存用户登录之后的信息。</p><p>抽象：<strong>一个 cookie 可以认为是一个「变量」，形如 <code>name=value</code>，存储在浏览器；一个 session 可以理解为一种数据结构，多数情况是「映射」（键值对），存储在服务器上</strong>。</p><p>Dao=&gt;Service=&gt;Web(Servlet)</p><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>Filter过滤器的作用是：拦截请求、过滤响应</p><p>比如必须先登录才能访问admin文件夹下的资源，那么这个时候我们应该添加一个过滤器，检查是否登录</p><img src="/2023/04/02/23spring-week6/image-20230323161312363.png" alt="image-20230323161312363" style="zoom:67%;"><p>Filter过滤器的使用步骤：</p><ol><li>编写一个类去实现Filter接口</li><li>实现过滤方法doFilter()</li><li>到web.xml中去配置Filter的拦截路径</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* doFilter 方法，专门用于拦截请求。可以做权限检查</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain</span></span><br><span class="line"><span class="params">    filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> httpServletRequest.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果等于 null，说明还没有登录</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            servletRequest.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest,servletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 让程序继续往下访问用户的目标资源</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Filter声明周期的几个方法：</p><p>构造器方法=&gt;init初始化方法（web工程启动时执行，意味着Filter在Web工程启动时创建）=&gt;doFilter方法（每次拦截到请求，就会执行）=&gt;destroy方法（停止Web工程时执行）</p><p>FilterChain过滤器链</p><p>顾名思义，就是多个Filter组合使用，它们执行的优先顺序由在web.xml文件中配置的顺序决定</p><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>一种轻量级的数据交换格式</p><p>一般的，我们要操作json中的数据的时候，需要json对象的格式；我们要在客户端和服务器之间进行数据交换的时候，使用json字符串</p><h4 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h4><p>即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发 技术</p><p><strong>Ajax 是一种浏览器通过 js 异步发起请求，局部更新页面的技术</strong></p><p>Ajax 请求的局部更新，浏览器地址栏不会发生变化 局部更新不会舍弃原来页面的内容</p><p>在使用Ajax时，浏览器会从一台Web服务器请求信息，然后处理该服务器的响应（HTML、XML或者JSON格式等）并将它显示在页面上。</p><p>浏览器会使用XMLHttpRequest对象来创建Ajax请求，服务器响应浏览器的请求之后，同一个XMLHttpRequest对象会继续处理返回的结果</p><p>核心就是<strong>创建请求和处理请求</strong></p><p>四步：</p><ol><li>首先创建XMLHttpRequest</li><li>调用open方法设置请求参数</li><li>在send方法前绑定onreadystatechange事件，处理请求完成之后的操作</li><li>调用send方法发送请求</li></ol><img src="/2023/04/02/23spring-week6/image-20230323171505555.png" alt="image-20230323171505555" style="zoom: 80%;"><p>ajax请求发送访问服务器中的ajaxServlet中的响应程序，该响应程序可以返回一些数据供页面显示</p><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>jQuery就是JS文件，它的作用是为了更加方便的编写JS</p><p><strong>选取</strong>元素与<strong>操作</strong>元素</p><ul><li>使用CSS样式选择器从DOM树中选择一个或多个节点</li><li>使用jQuery内置的方法来处理选取结果中的元素</li></ul><p>查找元素</p><p><img src="/2023/04/02/23spring-week6/image-20230323193009082.png" alt="image-20230323193009082"></p><p><img src="/2023/04/02/23spring-week6/image-20230323193044089.png" alt="image-20230323193044089"></p><p><img src="/2023/04/02/23spring-week6/image-20230323193054221.png" alt="image-20230323193054221"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line"><span class="comment">//js code</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//页面准备好之后就会执行js code</span></span><br><span class="line"><span class="comment">//一下是简写</span></span><br><span class="line">$(() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">选取元素：$(<span class="string">&quot;selector&quot;</span>)</span><br><span class="line">同时会创建一个jQuery对象，然后我们就可以调用jQuery的一些列方法</span><br><span class="line">如果我们要把jQuery对象保存到一个变量中</span><br><span class="line"><span class="keyword">let</span> $objectName = $(<span class="string">&quot;selector&quot;</span>);</span><br><span class="line">使用该对象的时候也要带上$，表明这是一个jQuery对象</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//给元素绑定事件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>CSS中的class属性可以有多个值，用空格隔开即可</strong></p>]]></content>
      
      
      <categories>
          
          <category> 复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 开发 </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23Spring_Week5</title>
      <link href="/2023/03/21/23Spring-Week5/"/>
      <url>/2023/03/21/23Spring-Week5/</url>
      
        <content type="html"><![CDATA[<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ol><li>最近学习过程中收获的经验：当我们要用一个陌生的库的时候，我们可以直接去该库的官网查看相关api，复制其提供的实例代码在自己编写的用来测试的类中跑一跑</li></ol><h2 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h2><p>1、<img src="/2023/03/21/23Spring-Week5/image-20230313172524340.png" alt="image-20230313172524340"></p><p>思考不申请额外存储空间的做法，只能在本串上操作</p><p>巧妙做法：反转前n个字符，反转n个字符后的字符，再将整个串反转</p><p>2、KMP算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用在字符串匹配上</span></span><br><span class="line"><span class="comment">//核心思想：当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。</span></span><br><span class="line"><span class="comment">//next数组是一个前缀表，记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀</span></span><br><span class="line"><span class="comment">//文本串与模式串</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">最长公共前后缀</span></span><br><span class="line"><span class="comment">前缀：不包含最后一个字符的所有以第一个字符开头的连续子串</span></span><br><span class="line"><span class="comment">后缀：不包含第一个字符的所有以最后一个字符结尾的连续子串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">！！！</span></span><br><span class="line"><span class="comment">前缀表具有告诉我们当前位置匹配失败，跳到之前已经匹配过的地方的能力</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">next数组就是前缀表，但是也有的next数组也可能是前缀表整体减一</span></span><br><span class="line"><span class="comment">个人更喜欢next数组即为前缀表的方案，所以代码也按照不减一来写</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">两个指针i&amp;j,i指向后缀末尾的位置，j指向前缀末尾的位置</span></span><br><span class="line"><span class="comment">j还表示i之前（包括i）最长相等的前后缀长度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//求next数组的过程：1）初始化；2）处理前后缀不相同的情况；3）处理前后缀不相同的情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(<span class="type">int</span>* next, <span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> next[needle.<span class="built_in">size</span>()];</span><br><span class="line">        <span class="built_in">getNext</span>(next, needle);</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; haystack.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; haystack[i] != needle[j]) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == needle.<span class="built_in">size</span>() ) &#123;</span><br><span class="line">                <span class="keyword">return</span> (i - needle.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3、重复的子字符串</p><p><img src="/2023/03/21/23Spring-Week5/image-20230313212800211.png" alt="image-20230313212800211"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string t = s + s;</span><br><span class="line">        t.<span class="built_in">erase</span>(t.<span class="built_in">begin</span>()); t.<span class="built_in">erase</span>(t.<span class="built_in">end</span>() - <span class="number">1</span>); <span class="comment">// 掐头去尾</span></span><br><span class="line">        <span class="keyword">if</span> (t.<span class="built_in">find</span>(s) != std::string::npos) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// r</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4、用两个栈来实现一个队列</p><p>两个栈来回倒就行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack1;<span class="comment">//主</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack2;</span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        stack1.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> t = stack1.<span class="built_in">top</span>();</span><br><span class="line">            stack1.<span class="built_in">pop</span>();</span><br><span class="line">            stack2.<span class="built_in">push</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res =  stack2.<span class="built_in">top</span>();</span><br><span class="line">        stack2.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!stack2.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> t = stack2.<span class="built_in">top</span>();</span><br><span class="line">            stack2.<span class="built_in">pop</span>();</span><br><span class="line">            stack1.<span class="built_in">push</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> t = stack1.<span class="built_in">top</span>();</span><br><span class="line">            stack1.<span class="built_in">pop</span>();</span><br><span class="line">            stack2.<span class="built_in">push</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res =  stack2.<span class="built_in">top</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!stack2.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> t = stack2.<span class="built_in">top</span>();</span><br><span class="line">            stack2.<span class="built_in">pop</span>();</span><br><span class="line">            stack1.<span class="built_in">push</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack1.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5、逆波兰表达式</p><p><img src="/2023/03/21/23Spring-Week5/image-20230317153003208.png" alt="image-20230317153003208"></p><p>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面</p><p>逆波兰表达式的优点：</p><ul><li>去掉括号后，表达式无歧义</li><li>适合用栈操作运算</li></ul><p>C++11中引入了一个stoi()函数讲字符串转换为整型</p><p>to_string()方法可以将整型转字符串</p><p><img src="/2023/03/21/23Spring-Week5/image-20230317155450162.png" alt="image-20230317155450162"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tokens.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> a = nums.<span class="built_in">top</span>();</span><br><span class="line">                nums.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b = nums.<span class="built_in">top</span>();</span><br><span class="line">                nums.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">                nums.<span class="built_in">push</span>(a + b);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> a = nums.<span class="built_in">top</span>();</span><br><span class="line">                nums.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b = nums.<span class="built_in">top</span>();</span><br><span class="line">                nums.<span class="built_in">pop</span>();</span><br><span class="line">                </span><br><span class="line">                nums.<span class="built_in">push</span>(b - a);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> a = nums.<span class="built_in">top</span>();</span><br><span class="line">                nums.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b = nums.<span class="built_in">top</span>();</span><br><span class="line">                nums.<span class="built_in">pop</span>();</span><br><span class="line">                </span><br><span class="line">                nums.<span class="built_in">push</span>(b * a);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> a = nums.<span class="built_in">top</span>();</span><br><span class="line">                nums.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b = nums.<span class="built_in">top</span>();</span><br><span class="line">                nums.<span class="built_in">pop</span>();</span><br><span class="line">                </span><br><span class="line">                nums.<span class="built_in">push</span>(b / a);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums.<span class="built_in">push</span>(<span class="built_in">stoi</span>(tokens[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5、滑动窗口最大值</p><p><img src="/2023/03/21/23Spring-Week5/image-20230319153612874.png" alt="image-20230319153612874"></p><p><strong>单调队列经典题目</strong></p><p>我们需要一个队列，随着窗口的滑动，队列也一进一出，每次移动之后，队列可以告诉我们其中的最大值</p><p>=&gt;单调队列</p><p>单调队列搭配滑动窗口使用</p><blockquote><p>deque：双端队列，头尾都可以插入和删除</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123; <span class="comment">//单调队列（从大到小）</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; que; <span class="comment">// 使用deque来实现单调队列</span></span><br><span class="line">        <span class="comment">// 每次弹出的时候，比较当前要弹出的数值是否等于队列出口元素的数值，如果相等则弹出。</span></span><br><span class="line">        <span class="comment">// 同时pop之前判断队列当前是否为空。</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!que.<span class="built_in">empty</span>() &amp;&amp; value == que.<span class="built_in">front</span>()) &#123;</span><br><span class="line">                que.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果push的数值大于入口元素的数值，那么就将队列后端的数值弹出，直到push的数值小于等于队列入口元素的数值为止。</span></span><br><span class="line">        <span class="comment">// 这样就保持了队列里的数值是单调从大到小的了。</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>() &amp;&amp; value &gt; que.<span class="built_in">back</span>()) &#123;</span><br><span class="line">                que.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            que.<span class="built_in">push_back</span>(value);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询当前队列里的最大值 直接返回队列前端也就是front就可以了。</span></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> que.<span class="built_in">front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        MyQueue que;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123; <span class="comment">// 先将前k的元素放进队列</span></span><br><span class="line">            que.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        result.<span class="built_in">push_back</span>(que.<span class="built_in">front</span>()); <span class="comment">// result 记录前k的元素的最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            que.<span class="built_in">pop</span>(nums[i - k]); <span class="comment">// 滑动窗口移除最前面元素</span></span><br><span class="line">            que.<span class="built_in">push</span>(nums[i]); <span class="comment">// 滑动窗口前加入最后面的元素</span></span><br><span class="line">            result.<span class="built_in">push_back</span>(que.<span class="built_in">front</span>()); <span class="comment">// 记录对应的最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>6、前k个高频元素</p><blockquote><p>正常情况下声明一个正向迭代器：容器类名::iterator 迭代器名</p><p>比如：<code>map&lt;int, int&gt;::iterator iter;</code></p></blockquote><p>这题的暴力解法是：利用map，key是值，value是出现的次数，按照value从大到小的顺序排列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//暴力：map，key是值，value是出现的次数，按照value从大到小的顺序排列</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt.<span class="built_in">find</span>(nums[i]) == cnt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                cnt.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt; (nums[i], <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cnt.<span class="built_in">find</span>(nums[i])-&gt;second++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> max_key;</span><br><span class="line">        <span class="type">int</span> max_freq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator iter = cnt.<span class="built_in">begin</span>(); iter != cnt.<span class="built_in">end</span>(); iter++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (iter-&gt;second &gt; max_freq) &#123;</span><br><span class="line">                    max_freq = iter-&gt;second;</span><br><span class="line">                    max_key = iter-&gt;first;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(max_key);</span><br><span class="line">            max_freq = <span class="number">0</span>;</span><br><span class="line">            cnt.<span class="built_in">erase</span>(max_key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>更好的做法是用优先队列实现</p><p>priority_queue</p><p>即堆，默认是用大根堆实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间复杂度：O(nlogk)</span></span><br><span class="line"><span class="comment">// 空间复杂度：O(n)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 小顶堆</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">mycomparison</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; lhs, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lhs.second &gt; rhs.second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 要统计元素出现频率</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map; <span class="comment">// map&lt;nums[i],对应出现的次数&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            map[nums[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对频率排序</span></span><br><span class="line">        <span class="comment">// 定义一个小顶堆，大小为k</span></span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, mycomparison&gt; pri_que;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用固定大小为k的小顶堆，扫面所有频率的数值</span></span><br><span class="line">        <span class="keyword">for</span> (unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = map.<span class="built_in">begin</span>(); it != map.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            pri_que.<span class="built_in">push</span>(*it);</span><br><span class="line">            <span class="keyword">if</span> (pri_que.<span class="built_in">size</span>() &gt; k) &#123; <span class="comment">// 如果堆的大小大于了K，则队列弹出，保证堆的大小一直为k</span></span><br><span class="line">                pri_que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(k)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            result[i] = pri_que.<span class="built_in">top</span>().first;</span><br><span class="line">            pri_que.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>栈提供push 和 pop 等等接口，所有元素必须符合先进后出规则，所以栈不提供走访功能，也不提供迭代器(iterator)。 不像是set 或者map 提供迭代器iterator来遍历所有元素。</p><p><strong>栈是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的（也就是说我们可以控制使用哪种容器来实现栈的功能）。</strong></p><p>所以STL中栈往往不被归类为容器，而被归类为container adapter（容器适配器）</p><p><strong>我们常用的SGI STL，如果没有指定底层实现的话，默认是以deque为缺省情况下栈的底层结构。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也可以指定实现栈的STL容器类型</span></span><br><span class="line">std::queue&lt;<span class="type">int</span>, std::list&lt;<span class="type">int</span>&gt;&gt; third; <span class="comment">// 定义以list为底层容器的队列</span></span><br><span class="line">std::stack&lt;<span class="type">int</span>, std::vector&lt;<span class="type">int</span>&gt; &gt; third;  <span class="comment">// 使用vector为底层容器的栈</span></span><br></pre></td></tr></table></figure><p>pop只会将元素弹出，但是不接受，即返回值类型是void</p><p>stack：top()返回栈顶元素</p><p>queue：front()返回队头元素，back()返回队尾元素</p>]]></content>
      
      
      <categories>
          
          <category> 复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23Spring_Week4</title>
      <link href="/2023/03/21/23Spring-Week4/"/>
      <url>/2023/03/21/23Spring-Week4/</url>
      
        <content type="html"><![CDATA[<h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>关于**.class方法**</p><p>我们知道在java中，一个类在被加载的时候虚拟机就会自动的生成一个这个类的一个Class类型的“类对象”，每个类都对应着一个这样的类对象，通过这个Class类型的类对象，我们就能够使用“内省与反射”机制，访问一个类的信息，比如：对应类中的方法有哪些，成员域有哪些等等；获取一个类的“类对象”的方法之一就是通过使用  类名.class 这个方式返回一个Class类型的对象，其他的获取这个Class对象的方法如下：</p><p>1). 利用对象调用getClass()方法获取该对象的Class实例</p><p>2). 使用Class的静态方法forName()，用类的名字获取一个Class实例</p><p>3). 运用.class的方式获取Class实例，对基本数据类型的封装类，还可以采用.TYPE来获取对应的基本数据类型的Class实例。</p><p>Web浏览器是使用对象创建的程序</p><ul><li>window对象</li><li>document对象</li></ul><p>document对象标识HTML页面</p><p>浏览器接收一个HTML页面=&gt;它创建页面的一个模型，并将其 存储在内存（树状模型）=&gt;将页面渲染显示在屏幕上</p><p>当取一个不存在的key值的value时：如果value为内置类型，其值将被初始化为0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; emptyMap;</span><br><span class="line"><span class="type">int</span> i = emptyMap[<span class="number">100</span>]; <span class="comment">// i = 0</span></span><br></pre></td></tr></table></figure><p><code>sort(nums.begin(), nums.end())</code></p><p><strong>注意</strong>：<code>STL</code>的<code>end()</code>指向的是最后一个元素的后面一位，比如<code>string s = &quot;abcde&quot;</code>，那么<code>s.end()</code>指向的不是<code>&#39;e&#39;</code>，而是其后面一位</p><p>reverse库函数</p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>C++string的find函数查找失败，返回<code>npos</code>;</p><p>C++string的replace函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="comment">//if (s.find(&quot;a&quot;) != string:npos);</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">find</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">//0</span></span><br><span class="line">cout&lt;&lt;s.<span class="built_in">replace</span>(s.<span class="built_in">find</span>(<span class="string">&quot;a&quot;</span>), <span class="number">2</span>, <span class="string">&quot;ba&quot;</span>);</span><br><span class="line"><span class="comment">//第一个参数表示开始的位置，第二个参数表示从开始位置起要替换的子串的长度</span></span><br></pre></td></tr></table></figure><p>C++string的<code>resize()</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s = &quot;abc&quot;;</span><br><span class="line">s.resize(5);</span><br><span class="line">//扩展到长度为5，其中默认用空白符填充，也可以指定</span><br><span class="line">s.resize(10, &#x27;b&#x27;);</span><br></pre></td></tr></table></figure><p>C++是不自带trim函数的</p><p>C++string的erase函数可以删除指定位置的字符<code>s.erase(s.begin() + 1);</code>也可以删除指定长度的字符<code>string&amp; erase(size_t pos=0, size_t len = npos);</code>也可以删除指定范围的字符串<code>iterator erase (iterator first, iterator last);</code></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>什么是<strong>npm</strong>？</p><p>NPM的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包</p><p><img src="/2023/03/21/23Spring-Week4/image-20230308192555104.png" alt="image-20230308192555104"></p><p>如果直接用IDEA修改数据库的数据的话，改完记得submit</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>web浏览器默认的字体大小为16px</p><p>字体大小的单位可以是px，也可以是百分号，百分之一百就是16px</p><p><code>text-decoration : none</code>可以去掉文本的装饰线，比如去掉a链接自带的下划线（通常情况下，浏览器以蓝色显示链接并且附带下划线）</p><p><code>:link</code>伪类可以为尚未访问过的链接设置样式</p><p><code>:visited</code>允许为那些已经单击过的链接设置样式</p><p><code>:hover</code>:鼠标悬停于某个元素上方时生效</p><p><code>:active</code>：在该元素上进行操作时有效，比如单击等</p><p><code>:focus</code>:该伪类在元素拥有焦点时有效</p><blockquote><p><strong>伪类选择器</strong>是一种选择器，它用冒号来定义，它可以选择处于特定状态的元素，例如悬停、点击等等。伪类选择器可以帮助开发者设置元素的动态状态的样式，而不改变DOM内容</p></blockquote><p>overflow属性告诉浏览器当盒子的内容超过盒子本身的大小的时候该如何显示：hidden 或者是scroll</p><p>想让盒子居中，可以将其左右外边距设置为auto，比如<code>.example&#123; margin: 10px auto; &#125;</code></p><p>list-style相关属性可以修改列表的相关样式</p><p>相对定位相对的是普通流中所处的位置，还会影响普通流</p><p>绝对定位的元素的位置相对于它的包含元素；它完全脱离了普通流；没有父级元素时，就相对于浏览器页面；使用绝对定位的元素随着页面的滚动而移动</p><p>固定定位是一种特殊的绝对定位，元素不随着页面的滚动而移动</p><p>float属性允许讲普通流中的元素在它的包含元素内尽可能地向左或向右排列，比如<code>float:left</code></p><p>clear属性用于表明一个盒子的左侧或者右侧不允许浮动元素，该属性可以选用以下值：left    right    both    none</p><p>比如left表明盒子的左侧不能接触同一个包含元素内的其他任何元素</p><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><ol><li><p>所有的值都可以视为真值或者假值</p></li><li><p>文档对象模型DOM，获取页面内容，修改页面内容</p></li><li><p>使用DOM树</p><ol><li>访问元素<ul><li>选择单个元素节点</li><li>选择多个元素</li><li>在元素节点之间遍历</li></ul></li><li>操作这些元素<ul><li>访问/更新文本节点</li><li>操作HTML内容</li><li>访问或更新属性值</li></ul></li></ol></li><li><p>查询到的可能是单个node，也可能是nodelist</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询多个元素</span></span><br><span class="line"><span class="keyword">var</span> elements = documents.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;hot&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (elements.<span class="property">length</span> &gt;= <span class="number">1</span>) <span class="keyword">var</span> firstItem = elements[<span class="number">0</span>];<span class="comment">//数组操作法</span></span><br></pre></td></tr></table></figure></li><li></li></ol><h2 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h2><h3 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h3><p><img src="/2023/03/21/23Spring-Week4/image-20230310184112922.png" alt="image-20230310184112922"></p><p>事实上，一个数要么是快乐数，要么是不快乐数</p><p>快乐数最终收敛为1，不快乐数最后都会进入 4 → 16 → 37 → 58 → 89 → 145 → 42 → 20 → 4 的循环中</p><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><p><img src="/2023/03/21/23Spring-Week4/image-20230310190045731.png" alt="image-20230310190045731"></p><p>暴力解法两层遍历</p><p>更好的做法是使用map这个数据结构，遍历一遍数组，到某个位置的时候，直接在map中寻找有没有值为target - nums[i]的元素，没有，则将此元素和其下标存入map中；有，则直接返回</p><h3 id="auto关键字"><a href="#auto关键字" class="headerlink" title="auto关键字"></a>auto关键字</h3><h3 id="四数之和-1"><a href="#四数之和-1" class="headerlink" title="四数之和 1"></a>四数之和 1</h3><p><img src="/2023/03/21/23Spring-Week4/image-20230310202656385.png" alt="image-20230310202656385"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">//剪枝处理</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; target &amp;&amp; nums[i] &gt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] &gt; target &amp;&amp; nums[i] + nums[j] &gt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> l = j + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="type">long</span>)nums[i] + nums[j] + nums[l] + nums[r] &gt; target) r--;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="type">long</span>)nums[i] + nums[j] + nums[l] + nums[r] &lt; target) l++;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt; &#123;nums[i], nums[j], nums[l], nums[r]&#125;);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span> (r &gt; l &amp;&amp; nums[r] == nums[r - <span class="number">1</span>]) r--;</span><br><span class="line">                        <span class="keyword">while</span> (r &gt; l &amp;&amp; nums[l] == nums[l + <span class="number">1</span>]) l++;</span><br><span class="line">                        r--;</span><br><span class="line">                        l++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="四数之和-2"><a href="#四数之和-2" class="headerlink" title="四数之和 2"></a>四数之和 2</h3><p><img src="/2023/03/21/23Spring-Week4/image-20230310192435189.png" alt="image-20230310192435189"></p><p>我的评价是，太夸张了！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a : nums1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> b : nums2) &#123;</span><br><span class="line">                map[a + b]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> c :nums3) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> d : nums4) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.<span class="built_in">find</span>(-(c + d)) != map.<span class="built_in">end</span>()) cnt += map.<span class="built_in">find</span>(-(c + d))-&gt;second;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道操作系统-Ch1学习笔记</title>
      <link href="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter-1——操作系统概述"><a href="#Chapter-1——操作系统概述" class="headerlink" title="Chapter 1——操作系统概述"></a>Chapter 1——操作系统概述</h1><h2 id="1-1-操作系统基本概念"><a href="#1-1-操作系统基本概念" class="headerlink" title="1.1 操作系统基本概念"></a>1.1 操作系统基本概念</h2><h3 id="1-1-1"><a href="#1-1-1" class="headerlink" title="1.1_1"></a>1.1_1</h3><h4 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h4><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230319231005218.png" alt="image-20230319231005218" style="zoom:67%;"><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230319231153311.png" alt="image-20230319231153311"></p><p><strong>操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的系统软件</strong></p><blockquote><p>操作系统是计算机系统中最基本的系统软件</p></blockquote><p>操作系统的功能和目标：</p><ul><li>作为系统资源的管理者</li><li>作为用户和计算机硬件之间的接口</li><li>作为最接近硬件的层次</li></ul><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230319231535543.png" alt="image-20230319231535543"></p><p>step1-4依次实现：文件管理，存储器管理，处理机管理，设备管理</p><p>对处理机的管理可归结为对进程的管理</p><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230319232312457.png" alt="image-20230319232312457"></p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230319232530148.png" alt="image-20230319232530148" style="zoom:67%;"><p>操作系统提供给编程人员、应用程序的接口是<strong>程序接口</strong>即系统调用</p><p>系统调用是操作系统为应用程序使用内核功能所提供的接口（系统调用是操作系统提供给用户的，它只能通过用户程序间接使用</p><blockquote><p>系统调用=系统调用指令=广义指令</p></blockquote><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230319233157985-16792399182001.png" alt="image-20230319233157985"></p><h3 id="1-1-2"><a href="#1-1-2" class="headerlink" title="1.1_2"></a>1.1_2</h3><h4 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h4><p>操作系统的基本特征包括：</p><ul><li>并发<ul><li>并发是指两个或多个事件在<strong>同一时间间隔内</strong>发生</li><li>注意同一时间间隔（并发）和同一时刻（并行）的区别</li><li>并发的事件宏观上是同时发生的，微观上是交替发生的</li></ul></li><li>共享<ul><li>资源共享即共享，是指系统中的资源可供内存中多个并发执行的进程共同使用</li><li>共享可分为以下两种<ul><li>互斥共享方式</li><li>同时共享方式</li></ul></li></ul></li><li>虚拟<ul><li>虚拟是指把物理上的实体变为若干逻辑上的对应物</li></ul></li><li>异步<ul><li>多道程序环境允许多个程序并发执行，但由于资源有限，进程的执行并不是一贯到底的，而是走走停停的，它以不可预知的速度向前推进，这就是进程的异步性</li></ul></li></ul><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320104629115.png" alt="image-20230320104629115"></p><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320152544205.png" alt="image-20230320152544205"></p><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320152755638.png" alt="image-20230320152755638"></p><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320153025881.png" alt="image-20230320153025881"></p><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320153405296.png" alt="image-20230320153405296"></p><p>显然失去了并发性，就也不存在异步性（程序的执行不用走走停停）</p><h2 id="1-2-操作系统发展历程"><a href="#1-2-操作系统发展历程" class="headerlink" title="1.2 操作系统发展历程"></a>1.2 操作系统发展历程</h2><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320113026439.png" alt="image-20230320113026439"></p><p>操作系统的基本功能主要有批处理操作系统、分时操作系统、实时操作系统</p><p><strong>实时性</strong>和<strong>可靠性</strong>是实时操作系统最重要的两个目标。</p><p>分时操作系统的响应时间T约等于QN，其中Q为时间片，N为用户数</p><p><strong>手工操作阶段</strong></p><p>主要缺点：用户独占全机、人机速度矛盾导致资源利用率极低</p><p><strong>批处理阶段</strong></p><ul><li>单道批处理阶段<ul><li>优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升</li><li>缺点：内存中仅能有一道程序运行，CPU有大量的时间是在空闲等待IO完成</li></ul></li><li>多道批处理阶段<ul><li>优点：多道程序并发执行，共享计算机资源，系统资源利用率大大提升</li><li>缺点：没有人机交互</li></ul></li></ul><p><strong>分时操作系统</strong></p><p>时间片</p><p>优点：解决了人机交互问题</p><p>缺点：不能优先处理一些紧急人物</p><p><a href="%E9%80%9A%E7%94%A8%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%9A%E5%85%B7%E6%9C%89%E5%A4%9A%E7%A7%8D%E7%B1%BB%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%89%B9%E5%BE%81%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%82%E5%8F%AF%E4%BB%A5%E5%90%8C%E6%97%B6%E5%85%BC%E6%9C%89%E5%A4%9A%E9%81%93%5B%E6%89%B9%E5%A4%84%E7%90%86%5D(https://baike.baidu.com/item/%E6%89%B9%E5%A4%84%E7%90%86?fromModule=lemma_inlink)%E3%80%81%E5%88%86%E6%97%B6%E3%80%81%E5%AE%9E%E6%97%B6%E5%A4%84%E7%90%86%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%8C%E6%88%96%E5%85%B6%E4%B8%AD%E4%B8%A4%E7%A7%8D%E4%BB%A5%E4%B8%8A%E7%9A%84%E5%8A%9F%E8%83%BD%E3%80%82">时间片轮转调度算法</a></p><p><strong>实时操作系统</strong></p><p>优点：能够优先响应一些紧急任务，某些紧急任务不需要时间片排队</p><p><strong>及时性和可靠性</strong></p><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320155851130.png" alt="image-20230320155851130"></p><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320155945229.png" alt="image-20230320155945229"></p><blockquote><p>通用操作系统：具有多种类型操作特征的操作系统。可以同时兼有多道批处理、分时、实时处理的功能，或其中两种以上的功能。</p></blockquote><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321192926031.png" alt="image-20230321192926031" style="zoom:50%;"><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321193047617.png" alt="image-20230321193047617" style="zoom:50%;"><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321193224352.png" alt="image-20230321193224352" style="zoom:50%;"><blockquote><p>访管：”访问管态“，管态即核心态、内核态，访管指令是唯一一个只能在用户态下执行，不能在核心态下执行的指令</p></blockquote><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321193810819.png" alt="image-20230321193810819" style="zoom:50%;"><p>进程调度由调度算法决定CPU使用权，由操作系统实现，不需要硬件支持</p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321194057059.png" alt="image-20230321194057059" style="zoom:50%;"><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321194420143.png" alt="image-20230321194420143" style="zoom:50%;"><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321194547088.png" alt="image-20230321194547088" style="zoom:50%;"><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321194636590.png" alt="image-20230321194636590" style="zoom:50%;"><blockquote><p>输入输出需要用到中断，因此要在核心态下执行</p></blockquote><p><strong>为什么说直到出现中断和通道技术后，多道程序概念才变得有用？</strong></p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321195530193.png" style="zoom:67%;"><h2 id="1-3-操作系统运行环境"><a href="#1-3-操作系统运行环境" class="headerlink" title="1.3 操作系统运行环境"></a>1.3 操作系统运行环境</h2><h3 id="1-3-1-操作系统的运行机制和体系结构"><a href="#1-3-1-操作系统的运行机制和体系结构" class="headerlink" title="1.3_1 操作系统的运行机制和体系结构"></a>1.3_1 操作系统的运行机制和体系结构</h3><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320193359193.png" alt="image-20230320193359193" style="zoom: 50%;"><ul><li>两种指令：<strong>特权指令</strong>&amp;非特权指令</li><li>两种处理机状态：用户态（目态）&amp;<strong>核心态</strong>（管态、内核态）</li><li>两种程序：应用程序&amp;<strong>内核程序</strong></li></ul><p><strong>最常考知识点:</strong></p><ol><li>特权指令只能在核心态下执行</li><li>内核程序只能在核心态下完成</li><li>核心态、用户态之间的切换</li></ol><p>大多数操作系统的内核包括4个方面的内容：</p><ul><li>时钟管理</li><li>中断机制</li><li>原语：原语是一种程序，它的执行必须一气呵成</li><li>系统控制的数据结构及处理</li></ul><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320193530441-16793121307887.png" alt="image-20230320193530441" style="zoom:50%;"><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320193605765.png" alt="image-20230320193605765" style="zoom:50%;"><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320193641701.png" alt="image-20230320193641701" style="zoom:50%;"><p><strong>内核是计算机上配置的底层软件，是操作系统最基本、最核心的部分。</strong>实现操作系统内核功能的那些程序就是<strong>内核程序</strong>。</p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320194102789.png" alt="image-20230320194102789" style="zoom:50%;"><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320194144457.png" alt="image-20230320194144457" style="zoom:50%;"><p>操作系统的体系结构：</p><ul><li>大内核</li><li>微内核</li></ul><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320194630841.png" alt="image-20230320194630841" style="zoom:50%;"><h3 id="1-3-2-中断和异常的概念"><a href="#1-3-2-中断和异常的概念" class="headerlink" title="1.3_2 中断和异常的概念"></a>1.3_2 中断和异常的概念</h3><h4 id="中断的概念和作用"><a href="#中断的概念和作用" class="headerlink" title="中断的概念和作用"></a>中断的概念和作用</h4><p>中断机制的诞生：为了实现多道程序并发执行而引入的一种技术</p><blockquote><p>对于单核CPU只谈并发，对多核CPU才谈并行</p></blockquote><p><strong>发生中断就意味着需要操作系统介入，开展管理工作</strong></p><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320195444814.png" alt="image-20230320195444814"></p><p>用户态和核心态的转换</p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320195733463.png" alt="image-20230320195733463" style="zoom:50%;"><h4 id="中断的分类"><a href="#中断的分类" class="headerlink" title="中断的分类"></a>中断的分类</h4><ul><li>内中断</li><li>外中断</li></ul><p>判断方法是看中断信号来自CPU内部还是外部</p><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321125220071.png" alt="image-20230321125220071"></p><blockquote><p>终止异常和外中断都属于硬件中断</p></blockquote><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320200520696.png" alt="image-20230320200520696" style="zoom:50%;"><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320200701247.png" alt="image-20230320200701247" style="zoom:50%;"><h4 id="外中断的处理过程"><a href="#外中断的处理过程" class="headerlink" title="外中断的处理过程"></a>外中断的处理过程</h4><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320200925129.png" alt="image-20230320200925129" style="zoom:50%;"><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320201124219.png" alt="image-20230320201124219" style="zoom:50%;"><h3 id="1-3-3-系统调用"><a href="#1-3-3-系统调用" class="headerlink" title="1.3_3 系统调用"></a>1.3_3 系统调用</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320202003330.png" alt="image-20230320202003330" style="zoom:50%;"><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320202316310.png" alt="image-20230320202316310" style="zoom:50%;"><blockquote><p>系统调用的相关处理需要在<strong>核心态</strong>下进行（因为有很多特权指令）</p></blockquote><h4 id="系统调用和库函数"><a href="#系统调用和库函数" class="headerlink" title="系统调用和库函数"></a>系统调用和库函数</h4><p>有的库函数是对系统调用的封装</p><p>并不是所有的库函数都会涉及系统调用</p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320202754697.png" alt="image-20230320202754697" style="zoom:50%;"><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320203227629.png" style="zoom:50%;"><p><strong>陷入指令是唯一一个只能在用户态执行，而不可在核心态执行的指令</strong></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321125811936.png" alt="image-20230321125811936"></p><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230320203740215.png" alt="image-20230320203740215"></p><p>一些从用户态转向核心态的例子：</p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321130035686.png" alt="image-20230321130035686" style="zoom: 67%;"><blockquote><p>中断是CPU从用户态转到核心态的唯一途径</p></blockquote><h2 id="1-4-操作系统结构"><a href="#1-4-操作系统结构" class="headerlink" title="1.4 操作系统结构"></a>1.4 操作系统结构</h2><ul><li><p>分层法</p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321131727833.png" alt="image-20230321131727833" style="zoom: 67%;"><p>单向依赖是分层OS的特点</p></li><li><p>模块化</p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321131744832.png" alt="image-20230321131744832" style="zoom:67%;"></li><li><p>宏内核</p></li><li><p>微内核</p><p>微内核的主要缺点是性能问题，因为需要频繁地在核心态和用户态之间进行切换，因而切换开销偏大</p><p>可以用4个方面描述微内核：1）内核足够小；2）基于C/S模式；3）应用”机制与策略分离“原理；4）采用面向对象技术</p></li><li><p>外核</p></li></ul><blockquote><p>从操作系统的内核架构来划分，可分为宏内核和微内核</p></blockquote><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321190627108.png" alt="image-20230321190627108" style="zoom:50%;"><p>答案为：C</p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321190658325.png" alt="image-20230321190658325" style="zoom:50%;"><blockquote><p>Windows是宏内核操作系统</p></blockquote><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321191409826.png" alt="image-20230321191409826" style="zoom:50%;"><h2 id="1-5-操作系统引导"><a href="#1-5-操作系统引导" class="headerlink" title="1.5 操作系统引导"></a>1.5 操作系统引导</h2><p>操作系统引导是指计算机利用CPU运行特定程序，通过程序识别硬盘，识别硬盘分区，识别硬盘分区上的操作系统，最后通过程序启动操作系统，一环扣一环完成上述过程。</p><h2 id="1-6-虚拟机"><a href="#1-6-虚拟机" class="headerlink" title="1.6 虚拟机"></a>1.6 虚拟机</h2><p>虚拟机是一台逻辑计算机，是指利用特殊的虚拟化技术，通过隐藏特定计算平台的实际物理特性，为用户提供抽象的、统一的、模拟的计算环境。</p><p>有<strong>两类</strong>虚拟化方法：</p><ul><li>第一类虚拟机管理程序</li><li>第二类虚拟机管理程序</li></ul><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321133639515.png" alt="image-20230321133639515"></p><blockquote><p>Vmware WorkStation是首个X86平台上的第二类虚拟机管理程序</p></blockquote><p><img src="/2023/03/21/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Ch1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230321133945058.png" alt="image-20230321133945058"></p><p>使用Vmware WorkStation，真实硬件不会执行虚拟机中的敏感指令，实际上由第二类虚拟机管理程序模拟真实硬件环境</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23Spring_Week3</title>
      <link href="/2023/03/07/23spring_week3/"/>
      <url>/2023/03/07/23spring_week3/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><p>什么是servlet技术？</p><ol><li>Servlet是JavaEE规范之一，所谓规范，即接口</li><li>Servlet是JavaWeb三大组件之一，三大组件分别是：<strong>Servlet程序，Filter过滤器，Listener监听器</strong></li><li>Servlet是运行在服务器上的一个Java小程序，他可以接受客户端发送过来的请求，并响应数据给客户端</li></ol><p>实现Servlet程序，并在xml配置文件中配置相关信息</p><p>一般开发项目中，都是通过继承HttpServlet类的方式实现Servlet程序<br><img src="/2023/03/07/23spring_week3/1.png"></p><p>理解Servlet类的继承结</p><p>ServletConfig类、ServletContext类</p><p>Http协议</p><p><a href="https://blog.csdn.net/xxujia/article/details/81355498">(10条消息) Java文件读写操作_xujia-Li的博客-CSDN博客_java文件读写</a></p><p><a href="https://blog.csdn.net/hancoder/article/details/89814638">C++中的NULL和nullptr</a></p><p>简单来说，都可以作空指针，NULL可以转化为0，nullptr可以转化为false</p><p>很多后端框架的底层都是Servlet，但是在写的时候可能经过重重封装，看不到Servlet的影子了</p><p>前后端分离，后端返回数据，如果渲染这些数据，由前端操作</p><p>数据如何传，JSON是一种方法</p><p><img src="/2023/03/07/23spring_week3/3.png"></p><h2 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h2><p><strong>删除链表的倒数第N个结点</strong></p><p>思路：双指针，快指针先向前走N步，接下来，快慢指针同时走，知道快指针走到头</p><p><strong>链表相交，求交点</strong></p><p>思路：分别计算两链表长度l1,l2,两链表尾部对齐，双指针，从较短链表头处开始向前移动，遇到两指针相同，即为交点</p><p><strong>环形链表，求环的入口处</strong></p><p>思路：首先如何判断有没有环？快慢指针，快指针一次前进两步，满指针一次一步，两者有交点，则有环，记交点为ptr1,ptr2指向链表头，ptr1和ptr2同时向前，相遇的地方即为环的入口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="comment">// 快慢指针相遇，此时从head 和 相遇点，同时查找直至相遇</span></span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                ListNode* index1 = fast;</span><br><span class="line">                ListNode* index2 = head;</span><br><span class="line">                <span class="keyword">while</span> (index1 != index2) &#123;</span><br><span class="line">                    index1 = index1-&gt;next;</span><br><span class="line">                    index2 = index2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index2; <span class="comment">// 返回环的入口</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>当我们遇到要快速判断一个元素是否出现在集合里的时候，就要考虑哈希法</strong></p><p>当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。</p><ul><li>数组（用数组做哈希一般题目都限制了数值的范围）</li><li>set（集合）</li><li>map（映射）</li></ul><p><img src="/2023/03/07/23spring_week3/2.png"></p><p><img src="/2023/03/07/23spring_week3/4.png"></p><p>当我们要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset。</p><p>那么再来看一下map ，map 是一个key value 的数据结构，map中，对key是有限制，对value没有限制的，因为key的存储方式使用红黑树实现的。</p><p>哈希法的思想是什么？把一些元素按照一定规则映射到特定的位置上，然后“查找”元素</p><p>关于哈希法应该选择何种数据结构</p><p>如果知道数值的范围，则一定可以使用数组；</p><p>使用集合优先unordered_set，其不允许重复值，如果可以有重复，则multiset，</p><p>使用map则优先使用unordered_map，其不允许key有重复，如果有重复key，则multimap</p><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>C++的STL是可以用迭代器初始化的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v1&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(v1.begin(), v1.end())</span></span>;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>IDEA的Debug</p><p><img src="/2023/03/07/23spring_week3/5.png"></p><p><img src="/2023/03/07/23spring_week3/6.png"></p><p><img src="/2023/03/07/23spring_week3/7.png"></p><p>变量窗口：查看<strong>当前方法范围内</strong>所有有效变量</p><p>方法调用栈窗口</p><p><img src="/2023/03/07/23spring_week3/8.png"></p><p>其他按钮</p><p><img src="/2023/03/07/23spring_week3/9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个博客，第一篇文章</title>
      <link href="/2022/10/16/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-1/"/>
      <url>/2022/10/16/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-1/</url>
      
        <content type="html"><![CDATA[<h1 id="终于搭好了人生第一个博客！！！"><a href="#终于搭好了人生第一个博客！！！" class="headerlink" title="终于搭好了人生第一个博客！！！"></a>终于搭好了人生第一个博客！！！</h1><p>这第一个博客的第一篇文章就用来记录我现在的心情吧~<br>emmmm今天学美化butterfly搞了一天，再加上健身有点累，明天再补上（</p><p>好了，时隔四天，我又来补上这第一篇文章。（</p><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><p>或许搭建一个个人的博客并不是什么很难的事情，但这却是我很久之前就有但因为各种原因（笨）一直未能实现的想法。搭这个博客也是经历了各种奇葩的错误，最离谱的也是卡了时间最久的一个错误是，我输入<strong>hexo s</strong>启动本地服务器，然后没有理解提示的<strong>ctrl + c</strong>的作用是关闭本地服务器，于是每一次复制ctrl c复制地址，这就导致了我在每次想要打开预览一下博客到底有没有成功搭起来时总会出现无法访问的情况，于是我就自然的怀疑是我环境没有配好，亦或是我前面的操作有误。这里卡了一个晚上没有解决，就放弃了。（emmmm）隔了一周左右发现了自己居然这么蠢。<br><img src="/2022/10/16/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-1/false.png"> <img src="/2022/10/16/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-09-22%20112410.png"></p>]]></content>
      
      
      <categories>
          
          <category> 生活规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/2022/10/16/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/16/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript学习笔记（简略）"><a href="#JavaScript学习笔记（简略）" class="headerlink" title="JavaScript学习笔记（简略）"></a>JavaScript学习笔记（简略）</h1><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>JavaScript是<strong>运行在浏览器上的脚本语言</strong>，简称<strong>JS</strong>，让浏览器不再是单纯的静态页面，更具有交互性。</p><p>JavaScript这个名字虽然带有Java，但是和Java没有任何关系，只是语法上有类似之处。他们运行的位置也不同。Java运行在JVM当中，JavaScript运行在浏览器的内存当中。</p><p>JS程序不需要程序员手动编译，编写完源代码后，浏览器直接打开解释执行。JS的目标程序以<strong>普通文本</strong>形式保存，这种语言都叫作“<strong>脚本语言</strong>”。</p><h4 id="在HTML中嵌入JS代码"><a href="#在HTML中嵌入JS代码" class="headerlink" title="在HTML中嵌入JS代码"></a>在HTML中嵌入JS代码</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1.要实现的功能是——用户点击按钮，弹出消息框</span></span><br><span class="line"><span class="comment">2.JS是一门事件驱动型的编程语言，依靠事件去驱动，然后执行对应的程序。</span></span><br><span class="line"><span class="comment">  在JS中有很事件，其中有一个事件叫做：鼠标单击，单词：click。并且任何事件都会对应一个事件句柄，click——onclick。事件和事件句柄的区别是事件句柄是在事件单词前添加一个on。而事件句柄是以HTML标签的属性存在的。</span></span><br><span class="line"><span class="comment">3.onclick=&quot;js代码&quot;,执行原理是什么</span></span><br><span class="line"><span class="comment">页面打开的时候，js代码并不会执行，只是把这段js代码注册到了按钮的click事件上了，等到这个按钮发生click事件之后，注册在onclick后面的js代码会被浏览器自动调用</span></span><br><span class="line"><span class="comment">4.怎么使用js代码弹出消息</span></span><br><span class="line"><span class="comment">在js中有一个内置的对象叫window，可以直接拿来使用，window代表的是浏览器对象，window对象有一个函数叫做：alert，用法：window.alert(&quot;……&quot;),弹窗，window可省略</span></span><br><span class="line"><span class="comment">5.js中的字符串可以使用双引号也可以使用单引号</span></span><br><span class="line"><span class="comment">6.js中的一条语句结束之后可以使用“;”，也可以不用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;start&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;hello js&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>脚本块的方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 样式块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JS的脚本块在一个页面中出现的次数、位置都没有要求 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 脚本块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;hello js&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//alert有阻塞当前页面加载的作用</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 暴露在脚本块当中的程序，在页面打开的时候执行，并且遵守</span></span><br><span class="line"><span class="comment">           自上而下的顺序依次逐行执行，这些代码的执行不需要事件 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p>引入外部独立的JS文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- js文件 命名为hello.<span class="property">js</span>--&gt;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在需要的位置引入JS脚本文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部独立的JS文件的时候，JS文件中的代码会遵循自上而下的顺序依次逐行执行 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在这里的script标签中间再写js代码就没有效果了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./hello.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--type属性可以省略--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 同一个JS文件可以被引用多次，但实际开发这种需求和少 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>数字、字母、下划线、美元符号组成，不能用数字开头,理论上没有长度限制</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>Java是一种强类型语言，Java存在编译阶段，假设有代码int i，那么Java程序编译阶段就已经确定了i变量的数据类型，该i变量的数据类型在编译阶段是int类型，那么这个变量到最终内存释放，一直都是int类型，不可能变成其他类型。</p><p>byte short int long float double boolean char (12484812)</p><h5 id="JS中的变量"><a href="#JS中的变量" class="headerlink" title="JS中的变量"></a>JS中的变量</h5><p>怎么声明变量？——var 变量名</p><p>JS是一种弱类型语言，变量没有确定的数据类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- java是一种强类型语言 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- js是一种弱类型语言 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在js中，当一个变量没有手动赋值的时候，系统默认赋值undefined</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// undefined在js中是一个值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(i);</span></span><br><span class="line"><span class="language-javascript">        i = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        i = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(i);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//alert(j);//一个变量没有声明直接访问，语法错误 j is not defined</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>在函数体之外声明的变量，全局变量的生命周期是——浏览器打开时声明，浏览器关闭时销毁，尽量少用，因为全局变量会一直在浏览器的内存当中，耗费内存空间。（尽量使用局部变量</p><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><p>在函数体当中声明的变量，包括一个函数的形参</p><p><strong>当一个变量声明的时候没有使用var关键字，那么这个变量就是全局变量</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">print</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            name = <span class="string">&quot;ycc&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当一个变量声明没有使用var关键字，那么这个变量就是全局变量</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">print</span>();<span class="comment">//要先调用一下print函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(name);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>语法格式一：</p><p>function 函数名（形式参数列表）{</p><p>​                函数体</p><p>}</p><p>语法格式二：</p><p>函数名 = function (形式参数列表) {</p><p>​                函数体</p><p>}</p><p><strong>注意：</strong></p><ol><li>JS中的函数不需要指定返回值类型，返回什么类型都可以</li><li>形参列表中的参数不需要指定数据类型</li></ol><p><strong>在JS当中，函数的名字不能重名，当函数重名的时候，后声明的函数会将之前声明的同名函数覆盖（无重载机制）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> (a + b);</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">username</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span> + username);</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">         </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;计算10 和 20 的值&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(add(10, 20))&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sayHello(&#x27;ycc&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>JS中数据类型有<strong>原始类型</strong>和<strong>引用类型</strong></p><ol><li>原始类型：Undefined、Number、String、Boolean、Null</li><li>引用类型：Object以及Object子类</li></ol><p>在ES6（ECMAScript）规范之前，有6种数据类型。在ES6之后，又添加了一种类型：Symbol</p><h5 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h5><p>JS中有一运算符typeof，可以在程序运行阶段动态的获得变量的数据类型</p><p>格式：typeof 变量名</p><p>typeof运算符结果是以下六个<strong>字符串</strong>之一，注意都是小写字母</p><ol><li>undefined</li><li>number</li><li>string</li><li>boolean</li><li>object</li><li>function</li></ol> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//jav//a判断字符a的数据类型是Null，但在使用typeof得到的结果却是object</span></span></span><br><span class="line"><span class="language-javascript">        串是否相等用==，没有equals</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(<span class="keyword">typeof</span> a ==<span class="string">&quot;number&quot;</span> &amp;&amp; <span class="keyword">typeof</span> b == <span class="string">&quot;number&quot;</span>) <span class="title function_">alert</span>(<span class="string">&quot; a + b = &quot;</span> + (a + b));</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">else</span> <span class="title function_">alert</span>(<span class="string">&quot; a and b are all need to be a num&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">5</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> a);<span class="comment">//a的数据类型是Null，但在使用typeof得到的结果却是object</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h5><p>Undefined类型只有一个值——undefined</p><p><strong>当一个变量没有手动赋值时，系统默认赋值undefined</strong>，或者也可以给一个变量手动赋值undefined</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> j = <span class="literal">undefined</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> k = <span class="string">&quot;undefined&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(i == j);<span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(j == k);<span class="comment">//false</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h5><p>整数、小数、NaN、无穷大（Infinity）都属于Number类型</p><p>关于NaN：表示Not a Number，不是一个数字，但属于Number类型</p><p>什么情况下结果是NaN？运算结果本应是一个数字，最后算完却不是一个数字</p><p>几个常用函数：</p><ol><li>parseInt():将字符串自动转化为数字，并只保留整数部分</li><li>parseFloat():将数字自动转化为数字</li><li>Math.ceil():向上取整</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> b = <span class="string">&quot;abc&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(a / b);<span class="comment">//输出结果为NaN</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="number">10</span> / <span class="number">0</span>);<span class="comment">//当除数为0时，结构为Infinity</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="number">10</span> / <span class="number">3</span>);<span class="comment">//3.33333333</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//isNaN()函数,结果是真，表示不是一个数字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(a) || <span class="built_in">isNaN</span>(b) ) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;参与运算的必须是数字&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> a + b;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sum</span>(<span class="number">10</span>, <span class="string">&quot;ac&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// parseInt函数:将字符串自动转换为数字，并且取整数位</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// parseFloat函数：将字符串自动转化为小数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Math.ceil()函数，向上取整</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">2.1</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h5><p>只有两个值：true&amp;false</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> username = <span class="string">&quot;ycc&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">if</span> (username) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="title function_">alert</span>(<span class="string">&quot;hello &quot;</span> + username);</span></span><br><span class="line"><span class="language-javascript">       &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="title function_">alert</span>(<span class="string">&quot;用户名不能为空&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//输出 hello ycc</span></span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>if括号里的表达式结果必须时布尔类型，为什么这里的字符串也能放在这里呢？</p><p>因为在Boolean类型中有一个函数叫做Boolean(),可以将非布尔类型转化为布尔类型</p><h5 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h5><p>Null类型只有一个值叫做null，但是typeof得到的结果却是object</p><h5 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h5><ol><li><p>在JS中字符串可以使用单引号也可以使用双引号</p></li><li><p>创建字符串：</p><ol><li><p>方法一：<code>var s1 =  &quot;abc&quot;; </code></p></li><li><p>方法二(使用JS内置的支持类String)：<code>var s2 = new String(&quot;abc&quot;);</code></p><p>需要注意的是，String是一个内置的类，可以直接使用，String的父类是Object</p></li><li><p>方法一创建的字符串俗称为小String，方法二创建的字符串俗称为大String（是一个object），他们的属性和函数都是通用的</p></li><li><p>String类型的常用属性和函数</p><ul><li><p>属性 length：获得string的长度（string.length）</p></li><li><p>函数 <code>charAt() indexOf()  lastIndexof() replace(string1, string2)  split() substr() substring() toLowerCase()</code>等等</p><p>注：<code>indexof()</code> 函数如果没找到目标字符串则返回-1；<code>replace()</code>函数替换第一个</p><p><code>substr()</code>和<code>substring()</code>的区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;abcdefg&quot;</span>.<span class="title function_">substr</span>(<span class="number">2</span>,<span class="number">4</span>));<span class="comment">//cdef</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;abcdefg&quot;</span>.<span class="title function_">substring</span>(<span class="number">2</span>,<span class="number">4</span>));<span class="comment">//cd</span></span><br><span class="line"><span class="comment">//substr(startIndex, length);</span></span><br><span class="line"><span class="comment">//substring(startIndex, endIndex);左闭右开</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> s1 = <span class="string">&quot;ycc&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ycczxy&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> s1 + <span class="string">&quot; &quot;</span> + <span class="keyword">typeof</span> s2); <span class="comment">//输出string object</span></span><br><span class="line">    <span class="title function_">alert</span>(s1.<span class="property">length</span> + <span class="string">&quot; &quot;</span> + s2.<span class="property">length</span>); <span class="comment">// 3 6  </span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h5><ol><li><p>Object类型是所有类型的超类，自定义的任何类型，默认继承Object</p></li><li><p>属性：<code>prototype</code>(主要)，作用是给类动态的扩展属性和函数；<code>constructor</code></p></li><li><p>函数：<code>toString() valueOf() toLocalString()</code></p></li><li><p>定义类与创建对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;<span class="comment">//可放形参</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;Hello Ycc&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    sayBye = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//可放形参</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;Bye~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义一个类的方式与定义一个函数一样</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//体现JS语言的奇葩性()</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHello</span>();<span class="comment">//这样做就是把sayHello看作一个普通的函数</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title function_">sayHello</span>(); <span class="comment">//这样做就把sayHello当作一个类来创建对象</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JS中类的定义，同时又是一个构造函数的定义</strong></p><p>即JS中类的定义和构造函数的定义是放在一起完成的</p><p>JS中的this也代表当前对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Stu</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//JS中的属性不用var声明则为全局变量</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//JS中定义一个函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> stu1 = <span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;zxy&quot;</span>, <span class="number">18</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(stu1.<span class="property">name</span> + stu1.<span class="property">age</span>);<span class="comment">//zxy 18</span></span></span><br><span class="line"><span class="language-javascript">    stu1.<span class="title function_">getName</span>();<span class="comment">//zxy</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//可以通过prototype这个属性动态的给类添加属性、函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Stu</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    stu1.<span class="title function_">getAge</span>();<span class="comment">//18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//同理String类型也可以进行扩展</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><p><strong>和Java对比学习</strong></p></li></ol><h5 id="null-NaN-undefined的区别"><a href="#null-NaN-undefined的区别" class="headerlink" title="null NaN undefined的区别"></a>null NaN undefined的区别</h5><ol><li><p>数据类型不一致，分别是：Null，Number， Undefined</p></li><li><p>null和undefined可以等同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">alert</span>(<span class="literal">null</span> == <span class="literal">undefined</span>);<span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">alert</span>(<span class="literal">null</span> === <span class="literal">undefined</span>);<span class="comment">//false</span></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//JS中有一个特殊的运算符三等号，既判断值是否相等，又判断数据类型是否相等</span></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//双等号只判断值是否相等</span></span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="JS的常用事件"><a href="#JS的常用事件" class="headerlink" title="JS的常用事件"></a>JS的常用事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">blur 失去焦点focus 获得焦点</span><br><span class="line">click 鼠标单击dbclick 鼠标双击</span><br><span class="line">keydown 键盘按下keyup 键盘弹起</span><br><span class="line">mousedown 鼠标按下mouseover 鼠标经过mousemove 鼠标移动mouseout 鼠标离开mouseup 鼠标弹起</span><br><span class="line">reset 表单重置submit 表单提交</span><br><span class="line">change 下拉列表选中项该改变，或文本框内容改变</span><br><span class="line">select 文本被选定</span><br><span class="line">load 页面加载完毕（整个<span class="variable constant_">HTML</span>页面中所有元素全部加载完毕之后发生）</span><br></pre></td></tr></table></figure><p>任何一个事件都会对应一个事件句柄，事件句柄是在事件前添加on</p><p>onXXX这个事件句柄出现在一个标签的属性位置上（事件句柄以属性的形式存在）</p><h4 id="回调函数的概念-amp-注册事件的两种方式"><a href="#回调函数的概念-amp-注册事件的两种方式" class="headerlink" title="回调函数的概念&amp;注册事件的两种方式"></a>回调函数的概念&amp;注册事件的两种方式</h4><p><strong>方式一：直接在标签中使用事件句柄</strong></p><p><strong>方式二：使用纯JS代码完成事件的注册</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 对于当前程序来说，sayHello函数被称为回调函数（callback函数）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 回调函数的特点；自己把这个函数的代码写出来了，但是这个函数不是自己负责调用，由其他程序负责调用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;Hello ycc&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注册事件的第一种方式，直接在标签中使用事件句柄 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将sayHello事件注册到按钮上，等待click事件发生之后，该函数被浏览器调用，我们也称这个函数为回调函数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sayHello()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打个招呼（第一种注册方式）&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;说再见（第二种注册方式）&quot;</span> <span class="attr">id</span>=<span class="string">&quot;button2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;匿名函数测试按钮&quot;</span> <span class="attr">id</span>=<span class="string">&quot;button3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第二种注册的方式，是使用纯JS代码完成事件的注册</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">sayBye</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;ByeBye~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//第一步：先获取这个按钮对象(document是全部小写，内置对象可以直接使用，</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//document代表整个HTML页面，window代表整个窗口)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btnObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//第二部：给按钮对象的onclick属性赋值</span></span></span><br><span class="line"><span class="language-javascript">        btnObj.<span class="property">onclick</span> = <span class="string">&quot;sayBye&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//注意这里千万别加小括号</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//这行代码的意义是：将回调函数sayBye注册到click事件上</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btnObj2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button3&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        btnObj2.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;匿名函数&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="comment">//也可以将匿名函数注册到事件上</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS代码的执行顺序"><a href="#JS代码的执行顺序" class="headerlink" title="JS代码的执行顺序"></a>JS代码的执行顺序</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button1&quot;</span>);<span class="comment">//无法获得id为button1的按钮</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;button1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>处理：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--load事件在整个HTML页面加载完毕后发生--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;ready()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">ready</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;button1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">//解析：相比之前的找不到对应id的元素，这样做在整个HTML页面加载完成后（所有元素也被加载完），再将函数注册到想要注册的事件上就不会出现这样的错误</span><br></pre></td></tr></table></figure><p>另一种变形：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//load事件在加载过程中被注册函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//load事件发生之后click事件再被注册函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;这样变形真的很酷&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;button1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="小练习：修改文本框为复选框"><a href="#小练习：修改文本框为复选框" class="headerlink" title="小练习：修改文本框为复选框"></a>小练习：修改文本框为复选框</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text1&quot;</span>).<span class="property">type</span> = <span class="string">&quot;checkbox&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;将文本框修改为复选框&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="捕捉回车"><a href="#捕捉回车" class="headerlink" title="捕捉回车"></a>捕捉回车</h4><p>充分体现JS的古怪</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameElt = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//回车键的键值是13</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//esc键的键值是27</span></span></span><br><span class="line"><span class="language-javascript">            usernameElt.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//event变量用来接收事件发生后浏览器自动创建的对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取键值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//对于键盘事件对象来说，都有keyCode属性用来获取键值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(event.<span class="property">keyCode</span> == <span class="number">13</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;输入完成&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="void运算符"><a href="#void运算符" class="headerlink" title="void运算符"></a>void运算符</h4><p>void运算符的语法：void(表达式)</p><p>原理：执行表达式，但不返回任何结果</p><p>作用：既保留住超链接的样式，同时用户点击该超链接的时候执行一段JS代码，但页面不跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.alert(&#x27;test code&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意这里void后面必须跟一个表达式，因为没有返回值，所以不会返回地址给href属性，就不会跳转--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意这里void前面带上Javascript:--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h4><ul><li>if</li><li>switch</li><li>while</li><li>do while</li><li>for循环</li><li>break</li><li>continue</li><li>for in语句 </li><li>with语句</li></ul><p>后两个语句了解即可，前面的控制语句与java用法一样</p><h5 id="JS数组"><a href="#JS数组" class="headerlink" title="JS数组"></a>JS数组</h5><p><strong>JS数组中元素的类型随意，元素的个数随意，用中括号包起来</strong></p><h5 id="创建JS数组"><a href="#创建JS数组" class="headerlink" title="创建JS数组"></a>创建JS数组</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var arr = [false, true, 1, 2, &quot;abc&quot;, 3.14];</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //JS数组中元素的类型随意，元素的个数随意</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for (var i = 0; i &lt; arr.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     alert(arr[i])</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;//for循环</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for (var i in arr) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     alert(arr[i]);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;//用在数组上，for in 中的每个i是下标，java中for each语句每个i是元素</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//for in 语句可以遍历对象的属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">User</span> = <span class="keyword">function</span>(<span class="params">username, password</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">username</span> = username;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">password</span> = password;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> user1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zxy&quot;</span>, <span class="string">&quot;0608&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(user1[<span class="string">&quot;username&quot;</span>] + <span class="string">&quot; &quot;</span> + user1[<span class="string">&quot;password&quot;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for (var i in user1) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     alert(user1[i]);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;//用在对象上，每个i代表对象的属性名</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">with</span>(<span class="params">user1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(username);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="comment">//用的少，了解即可</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS内置对象"><a href="#JS内置对象" class="headerlink" title="JS内置对象"></a>JS内置对象</h4><h5 id="内置Date类，周期函数setInteval"><a href="#内置Date类，周期函数setInteval" class="headerlink" title="内置Date类，周期函数setInteval"></a>内置Date类，周期函数setInteval</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// JS中内置的支持类Date，可以用来获取时间、日期</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取系统当前时间</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// document.write(nowTime);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//转换成具有本地语言环境的日期格式</span></span></span><br><span class="line"><span class="language-javascript">        nowTime = nowTime.<span class="title function_">toLocaleString</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(nowTime);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 也可以自己设置日期格式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> year = t.<span class="title function_">getFullYear</span>();<span class="comment">// 返回年信息，以全格式返回</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> month =  t.<span class="title function_">getMonth</span>();<span class="comment">// 月份是0-11</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> day = t.<span class="title function_">getDate</span>();<span class="comment">//日</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(year + <span class="string">&quot;年&quot;</span> + (month + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">displayTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> timeStr = time.<span class="title function_">toLocaleString</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;timeDiv&quot;</span>).<span class="property">innerHTML</span> = timeStr;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            v = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="string">&quot;displayTime()&quot;</span>, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 从这行代码执行开始，每一千毫秒调用一次displayTime()函数</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(v);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示时间&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;start()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;timeDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;停止时间&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;stop()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="内置支持类Array"><a href="#内置支持类Array" class="headerlink" title="内置支持类Array"></a>内置支持类Array</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> arr1 = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span> , <span class="literal">true</span>, <span class="string">&quot;abc&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 数据类型随意</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(arr2.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr2.<span class="property">length</span>; i++) <span class="variable language_">document</span>.<span class="title function_">write</span>(arr2[i] + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(arr2[<span class="number">4</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 下标越界，值是undefined</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// write 写字符串，把引号引出的内容显示出来，&lt;br&gt;则换行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = arr2.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);<span class="comment">//连接数组的元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(str);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        arr2.<span class="title function_">push</span>(<span class="number">10</span>);<span class="comment">// 向数组末尾添加10</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> end = arr2.<span class="title function_">pop</span>(); <span class="comment">// 弹出数组末尾的元素</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建数组的另一种方法（前一种更常用）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var a = new Array();</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// document.write(a.length);// 长度为零</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var a2 = new Array(3);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// document.write(a2.length);// 3表示长度</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var a3 = new Array(3, 2);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// document.write(length); // 3， 2为数组的具体元素</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p><strong>JavaScript包括三块：ECMAScript，DOM，BOM</strong></p><blockquote><p>ECMAScript：JS的核心语法（ES规范、ECMA-262标准）</p><p>DOM：Document Object Model（文档对象模型：对网页中的节点进行增删改的过程，HTML文档被当作一颗DOM树来看待）</p><p>代表：<code>var domObj = document.getElementById(&quot;id&quot;);</code></p><p>BOM：Browser Object Model（浏览器对象模型）</p><p>代表：关闭浏览器窗口、打开一个新的浏览器窗口、后退、前进、浏览器地址栏上的地址等</p></blockquote><hr><p><strong>DOM和BOM的区别和联系</strong></p><p>DOM的顶级对象是document，BOM的顶级对象是window</p><p><strong>BOM是包含DOM的</strong></p><h4 id="DOM编程案例"><a href="#DOM编程案例" class="headerlink" title="DOM编程案例"></a>DOM编程案例</h4><h5 id="设置和获得文本框的value"><a href="#设置和获得文本框的value" class="headerlink" title="设置和获得文本框的value"></a>设置和获得文本框的value</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btnElt = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            btnElt.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> textElt = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> username = textElt.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(username);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// alert(document.getElementById(&quot;username&quot;).value); 简写</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username2&quot;</span>).<span class="property">value</span> = username;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取文本框的value&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;alert(this.value)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="innerHTML和innerText属性"><a href="#innerHTML和innerText属性" class="headerlink" title="innerHTML和innerText属性"></a>innerHTML和innerText属性</h5><p>innerHTML和innerText属性有什么区别？</p><p>​    相同点：都可以设置元素内部的内容</p><p>​    不同点：innerHTML会把后面设置的内容当作一段HTML代码解释并执行；innerText只会将其当                    作普通文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> divElt = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                divElt.<span class="property">innerHTML</span> = <span class="string">&quot;这是一段HTML代码&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;设置div中的内容&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h5><ol><li><p>什么是正则表达式？有什么用？</p><p>正则表达式：Regular Expression</p><p>正则表达式主要用在字符串格式匹配方面</p></li><li><p>大部分编程语言都支持正则表达式</p></li></ol><p><strong>常用正则表达式符号</strong>：</p><ul><li>. 匹配除换行符以外的任意字符</li><li>\w 匹配字母或数字或下划线或汉字</li><li>\s 匹配任意的空白符</li><li>\d 匹配数字</li><li>\b 匹配单词的开始或结束</li><li>^ 匹配字符串的开始</li><li>$ 匹配字符串的结束</li><li>“*” 重复零次或更多次</li><li>“+” 重复一次或更多次</li><li>？   重复零次或一次</li><li>{n}  重复n次</li><li>{n,} 重复n次或更多次</li><li>{n,m} 重复n到m次</li><li>\W 匹配任意不是字母，数字，下划线，汉字的字符</li><li>\S 匹配任意不是空白符的字符</li><li>\D 匹配任意非数字的字符</li><li>\B  匹配不是单词开头或结束的位置</li><li>[^x] 匹配除了x以外的任意字符</li></ul><p><strong>例子</strong>：</p><ol><li><p>QQ号的正则表达式：<code>^[1-9][0-9]&#123;4,&#125;</code></p><p><code>[1-9]</code>表示1到9的任意一个字符</p><p><code>[a-z0-9]</code>表示a-z，0-9中的任意一个字符</p><p><code>[a-z0-9-]</code>表示a-z，0-9，-中的任意一个字符</p></li><li><p>Email正则：</p></li></ol><p><strong>创建正则表达式对象</strong></p><p>方式一：<code>var regExp = /正则表达式/flags;</code></p><p>方式二：<code>var regExp = new RegExp(&quot;正则表达式&quot;,&quot;flags&quot;);</code>使用内置支持类</p><p>关于flags：</p><p>​    g：全局匹配</p><p>​    i：忽略大小写</p><p>​    m：多行搜索，当前面是正则表达式的时候，m不能用，只有当前面是普通字符串的时候才可以            使用m</p><p><strong>正则表达式对象的test()方法</strong></p><p>正则表达式对象.test(用户填写的字符串)，返回true（字符串格式匹配成功）或者false</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btnElt = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            btnElt.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> txtElt = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txt1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> regExp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^[1-9][0-9]&#123;4,&#125;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (regExp.<span class="title function_">test</span>(txtElt.<span class="property">value</span>)) <span class="title function_">alert</span>(<span class="string">&quot;验证成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>).<span class="property">innerText</span>= <span class="string">&quot;请输入合法的qq号&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获得焦点时清空提示信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txt1&quot;</span>).<span class="property">onfocus</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>).<span class="property">innerText</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;验证qq号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txt1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 14px; color:gray; background-color: blue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>trim</strong>()函数</p><p>清空字符串两端的空格</p><h5 id="触发一个事件"><a href="#触发一个事件" class="headerlink" title="触发一个事件"></a>触发一个事件</h5><p>除了人为操作，也可以使用纯JS代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如触发一个blur事件，除了人为操作浏览器外</span></span><br><span class="line">elt.<span class="title function_">focus</span>();</span><br><span class="line">elt.<span class="title function_">blur</span>();</span><br><span class="line"><span class="comment">//直接调用函数</span></span><br></pre></td></tr></table></figure><h5 id="复选框的全选与取消全选"><a href="#复选框的全选与取消全选" class="headerlink" title="复选框的全选与取消全选"></a>复选框的全选与取消全选</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> allCheck = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;allCheck&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> boxs = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;check&quot;</span>);<span class="comment">//通过名字获得多个元素,是一个数组</span></span></span><br><span class="line"><span class="language-javascript">            allCheck.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; boxs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    boxs[i].<span class="property">checked</span> = allCheck.<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//添加一个功能，判断下面三个复选框，如果全部选中，就将第一个也选上</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; boxs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                boxs[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; boxs.<span class="property">length</span>; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (boxs[j].<span class="property">checked</span>) count++;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    allCheck.<span class="property">checked</span> = (count == boxs.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;    </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;allCheck&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;check&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>java <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;check&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c++&quot;</span>&gt;</span>c++ <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;check&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span>&gt;</span>c <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="获取下拉列表选中项的value"><a href="#获取下拉列表选中项的value" class="headerlink" title="获取下拉列表选中项的value"></a>获取下拉列表选中项的value</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> selectElt = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;selectElt&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            selectElt.<span class="property">onchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125; </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectElt&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>java<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;c++&quot;</span>&gt;</span>c++<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span>&gt;</span>c<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="BOM编程案例"><a href="#BOM编程案例" class="headerlink" title="BOM编程案例"></a>BOM编程案例</h4><h5 id="window的open和close函数"><a href="#window的open和close函数" class="headerlink" title="window的open和close函数"></a>window的open和close函数</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// BOM编程中，window对象是顶级对象，代表浏览器窗口</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// window 有open和close方法，可以开启窗口和关闭窗口</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认开启的是新窗口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度(当前窗口)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;,&#x27;_self&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度(新窗口)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;,&#x27;_blank&#x27;)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打开html页面&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;./open.html&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="弹出消息框和确认框"><a href="#弹出消息框和确认框" class="headerlink" title="弹出消息框和确认框"></a>弹出消息框和确认框</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">del</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;确认删除？&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// confirm会输出提示信息，并让用户选择确定(返回true)或者取消(返回false)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;已成功删除&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 简写</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// if(window.confirm(&quot;确认删除？&quot;)) &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     window.alert(&quot;已成功删除&quot;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;弹出消息框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.alert(&quot;</span><span class="attr">消息框</span>&quot;)&quot;&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- alert弹出消息框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;弹出确认框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;del()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="history对象实现前进和后退"><a href="#history对象实现前进和后退" class="headerlink" title="history对象实现前进和后退"></a>history对象实现前进和后退</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;关闭当前窗口&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.close()&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后退的两种方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;后退&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.history.back()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;后退&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.history.go(-1)&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- go(1)则是前进 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="location属性更改浏览器地址栏上的URL"><a href="#location属性更改浏览器地址栏上的URL" class="headerlink" title="location属性更改浏览器地址栏上的URL"></a>location属性更改浏览器地址栏上的URL</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">goBaidu</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> locationObj = <span class="variable language_">window</span>.<span class="property">location</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获得window的地址栏属性</span></span></span><br><span class="line"><span class="language-javascript">            locationObj.<span class="property">href</span> = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// window.location.href = &quot;http://www.baidu.com&quot;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// window.location = &quot;http://www.baidu.com&quot;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// // href可以省略</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// document.location.href = &quot;http://www.baidu.com&quot;;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;新浪&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;goBaidu()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="向浏览器发请求"><a href="#向浏览器发请求" class="headerlink" title="向浏览器发请求"></a>向浏览器发请求</h5><ul><li>表单form提交</li><li>超链接</li><li>document.location</li><li>window.location</li><li>window.open(“url”)</li><li>直接在浏览器地址栏上输入URL，然后回车</li></ul><p>以上所有的请求方式均可以携带数据给服务器，通过表单和手动输入的可以是动态的。</p><h5 id="将当前窗口设置为顶级窗口"><a href="#将当前窗口设置为顶级窗口" class="headerlink" title="将当前窗口设置为顶级窗口"></a>将当前窗口设置为顶级窗口</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">top</span> != <span class="variable language_">window</span>.<span class="property">self</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">top</span>.<span class="property">location</span> = <span class="variable language_">window</span>.<span class="property">self</span>.<span class="property">location</span>;</span><br><span class="line">    <span class="comment">//window.top.location.href = window.self.location.href;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果当前窗口的顶级窗口不是自己，就将自己设置为顶级窗口</span></span><br></pre></td></tr></table></figure><h4 id="JSON在开发中的使用"><a href="#JSON在开发中的使用" class="headerlink" title="JSON在开发中的使用"></a>JSON在开发中的使用</h4><p>JavaScript Object Notation（JavaScript对象标记），简称JSON，一种基于JavaScript的标准的轻量级数据交换格式</p><p>JSON主要的作用是：一种标准的数据交换格式</p><p>在实际开发中，最常用的两种数据交换格式是JSON和XML（XML体积较大，但更严谨）</p><blockquote><p>HTML与XML有一个父亲：SGML（标准通用的标记语言）</p><p>HTML主要做页面展示，所以语法较松散；XML主要做数据存储和数据描述，所以语法相当严格。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObj = &#123;</span><br><span class="line"><span class="string">&quot;属性名&quot;</span> : 属性值,</span><br><span class="line"><span class="string">&quot;属性名&quot;</span> : 属性值,</span><br><span class="line"><span class="string">&quot;属性名&quot;</span> : 属性值,</span><br><span class="line"><span class="string">&quot;属性名&quot;</span> : 属性值</span><br><span class="line">&#125;; <span class="comment">// 创建一个JSON对象</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建JSON对象(JSON也可以称为无类型对象，轻量级)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> stuObj = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ycc&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;age&quot;</span>: <span class="number">19</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;height&quot;</span>:<span class="number">178</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// key:value</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 访问JSON对象属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(stuObj.<span class="property">name</span> + <span class="string">&quot;,&quot;</span> + stuObj.<span class="property">age</span> + <span class="string">&quot;,&quot;</span> + stuObj.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 之前没有JSON的时候，要做到这种效果需要定义类，创建对象，访问属性</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSON也可以实现嵌套，即一个JSON的属性值也是一个JSON对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stu = &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;students&quot;</span> : [</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span> : <span class="string">&quot;张三&quot;</span>， <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span> : <span class="string">&quot;张四&quot;</span>， <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;<span class="comment">// students的属性值是一个数组，然后这个数组中每一个元素又是一个JSON对象</span></span><br></pre></td></tr></table></figure><p><strong>eval</strong>函数：将字符串当作一段JS代码解释执行</p><p>java连接数据库，查询数据之后，将数据在Java程序中拼接成JSON格式的<strong>字符串</strong>，将JSON格式的字符串相应到浏览器。也就是说java响应到浏览器的仅仅是一个JSON格式的字符串，还不是一个JSON对象。可以使用eval函数将json格式的字符串转换成json对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fromJava = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;age\&quot;:\&quot;18\&quot;&#125;&quot;</span>;<span class="comment">//这是java程序响应的json格式的字符串</span></span><br><span class="line">win.<span class="built_in">eval</span>(<span class="string">&quot;var jsonObj = &quot;</span> + fromJava);</span><br><span class="line"><span class="comment">// 这一句就将json格式的字符串转换为了json对象，后面就可以使用jsonobj这个json对象了</span></span><br></pre></td></tr></table></figure><p><strong>在JS中<code>[]</code>和<code>&#123;&#125;</code>有什么区别</strong></p><p>[]是数组，{}是json</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
